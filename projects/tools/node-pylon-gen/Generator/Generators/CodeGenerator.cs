// MIT License
//
// Copyright (c) 2017 Björn Rennfanz <bjoern@fam-rennfanz.de>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

using NodePylonGen.Config;
using NodePylonGen.Generator.Model;
using NodePylonGen.Generator.Utils;
using System;
using System.Collections.Generic;
using System.IO;

namespace NodePylonGen.Generator.Generators
{
    public abstract class CodeGenerator : BlockGenerator
    {
        public BindingContext Context { get; }
        public List<TranslationUnit> TranslationUnits { get; }

        public TranslationUnit TranslationUnit => TranslationUnits[0];

        public abstract string FileExtension { get; }
        public virtual string FilePath
        {
            get
            {
                string fileName = TranslationUnit.FileNameWithoutExtension + "." + FileExtension;
                string filePath = Path.GetDirectoryName(TranslationUnit.FilePath);

                return Path.Combine( filePath, fileName);
            }
        }

        protected CodeGenerator(BindingContext context, TranslationUnit unit)
            : this(context, new List<TranslationUnit> { unit })
        {
        }

        protected CodeGenerator(BindingContext context, IEnumerable<TranslationUnit> units)
        {
            Context = context;
            TranslationUnits = new List<TranslationUnit>(units);
        }

        public abstract void Process();

        public override string Generate()
        {
            // Check if generator type is Java
            if (Context.IsJavaGenerator)
            {
                return GenerateUnformatted();
            }

            return base.Generate();
        }

        public void GenerateMultiLineComment(List<string> lines, CommentType commentType)
        {
            string lineCommentPrologue = CommentGenerator.GetLinePrologue(commentType);
            if (!string.IsNullOrWhiteSpace(lineCommentPrologue))
            {
                WriteLine("{0}", lineCommentPrologue);
            }

            string multiLineCommentPrologue = CommentGenerator.GetMultiLinePrologue(commentType);
            foreach (var line in lines)
            {
                WriteLine("{0} {1}", multiLineCommentPrologue, line);
            }

            var lineCommentEpilogue = CommentGenerator.GetLineEpilogue(commentType);
            if (!string.IsNullOrWhiteSpace(lineCommentEpilogue))
            {
                WriteLine("{0}", lineCommentEpilogue);
            }
        }

        public virtual void GenerateFilePreamble(CommentType type, string generatorName = "pylon-node-gen")
        {
            var lines = new List<string>
            {
                "----------------------------------------------------------------------------",
                $"This is auto generated code by {generatorName}.",
                "Do not edit this file or all your changes will be lost after re-generation.",
                "----------------------------------------------------------------------------",
            };

            PushBlock(BlockType.Header);
            GenerateMultiLineComment(lines, type);
            PopBlock(NewLineType.BeforeNextBlock);
        }

        public virtual void GenerateLegalFilePreamble(CommentType type, string creatorYear = "", string creatorName = "Björn Rennfanz <bjoern@fam-rennfanz.de>")
        {
            // Check if year is empty
            if (string.IsNullOrEmpty(creatorYear))
            {
                // Set copyright year to today
                creatorYear = DateTime.Now.ToString("yyyy");
            }

            var lines = new List<string>
            {
                "MIT License",
                "",
                $"Copyright (c) {creatorYear} {creatorName}",
                "",
                "Permission is hereby granted, free of charge, to any person obtaining a copy",
                "of this software and associated documentation files (the \"Software\"), to deal",
                "in the Software without restriction, including without limitation the rights",
                "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
                "copies of the Software, and to permit persons to whom the Software is",
                "furnished to do so, subject to the following conditions:",
                "",
                "The above copyright notice and this permission notice shall be included in all",
                "copies or substantial portions of the Software.",
                "",
                "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
                "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
                "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
                "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
                "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
                "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
                "SOFTWARE.",
                ""
            };

            PushBlock(BlockType.Header);
            GenerateMultiLineComment(lines, type);
            PopBlock();
        }
    }
}