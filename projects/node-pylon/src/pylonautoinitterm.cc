// MIT License
// 
// Copyright (c) 2017 - 2018 Bj√∂rn Rennfanz <bjoern@fam-rennfanz.de>
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// ----------------------------------------------------------------------------
// This is auto generated code by pylon-node-gen.
// Do not edit this file or all your changes will be lost after re-generation.
// ----------------------------------------------------------------------------

#include "pylonautoinitterm.h"
#include "pylon_v8.h"

using namespace v8;
using namespace Pylon;

Nan::Persistent<FunctionTemplate> PylonAutoInitTermWrap::prototype;
Nan::Persistent<Function> PylonAutoInitTermWrap::constructor;

// Supported implementations
// PylonAutoInitTerm()
// PylonAutoInitTerm(PylonAutoInitTerm& const arg0)
PylonAutoInitTermWrap::PylonAutoInitTermWrap(Nan::NAN_METHOD_ARGS_TYPE info)
  : m_PylonAutoInitTerm(NULL)
{
    // Check constructor arguments
    if (info.Length() == 0)
    {
        // PylonAutoInitTerm()
        m_PylonAutoInitTerm = new PylonAutoInitTerm();
    }
    else if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "PylonAutoInitTerm")))
    {
        // Unwrap object
        PylonAutoInitTermWrap* arg0_wrap = ObjectWrap::Unwrap<PylonAutoInitTermWrap>(info[0]->ToObject());
        PylonAutoInitTerm* arg0 = arg0_wrap->GetWrapped();

        // PylonAutoInitTerm(PylonAutoInitTerm& const arg0)
        m_PylonAutoInitTerm = new PylonAutoInitTerm(*arg0);
    }
}

PylonAutoInitTermWrap::~PylonAutoInitTermWrap()
{
    delete m_PylonAutoInitTerm;
}

NAN_MODULE_INIT(PylonAutoInitTermWrap::Initialize)
{
    // Prepare constructor template
    Local <FunctionTemplate> tpl = Nan::New<FunctionTemplate>(New);
    tpl->SetClassName(Nan::New("PylonAutoInitTermWrap").ToLocalChecked());
    tpl->InstanceTemplate()->SetInternalFieldCount(1);

    // Register prototypes to template

    // Register template in Node JS
    prototype.Reset(tpl);
    Local<Function> function = Nan::GetFunction(tpl).ToLocalChecked();
    constructor.Reset(function);
    Nan::Set(target, Nan::New("PylonAutoInitTerm").ToLocalChecked(), function);

    // Register static functions in Node JS
    Nan::Set(target, Nan::New<String>("pylonInitialize").ToLocalChecked(), Nan::GetFunction(Nan::New<FunctionTemplate>(PylonAutoInitTermWrap::PylonInitialize)).ToLocalChecked());
    Nan::Set(target, Nan::New<String>("pylonTerminate").ToLocalChecked(), Nan::GetFunction(Nan::New<FunctionTemplate>(PylonAutoInitTermWrap::PylonTerminate)).ToLocalChecked());
    Nan::Set(target, Nan::New<String>("getPylonVersion").ToLocalChecked(), Nan::GetFunction(Nan::New<FunctionTemplate>(PylonAutoInitTermWrap::GetPylonVersion)).ToLocalChecked());
    Nan::Set(target, Nan::New<String>("getPylonVersionString").ToLocalChecked(), Nan::GetFunction(Nan::New<FunctionTemplate>(PylonAutoInitTermWrap::GetPylonVersionString)).ToLocalChecked());
}

NAN_METHOD(PylonAutoInitTermWrap::GetPylonVersion)
{
    if ((info.Length() == 4) && info[0]->IsNumber() && info[1]->IsNumber() && info[2]->IsNumber() && info[3]->IsNumber())
    {
        // Convert from number value to pointer
        unsigned int arg0_value = static_cast<unsigned int>(info[0]->NumberValue());
        unsigned int* arg0 = &arg0_value;

        // Convert from number value to pointer
        unsigned int arg1_value = static_cast<unsigned int>(info[1]->NumberValue());
        unsigned int* arg1 = &arg1_value;

        // Convert from number value to pointer
        unsigned int arg2_value = static_cast<unsigned int>(info[2]->NumberValue());
        unsigned int* arg2 = &arg2_value;

        // Convert from number value to pointer
        unsigned int arg3_value = static_cast<unsigned int>(info[3]->NumberValue());
        unsigned int* arg3 = &arg3_value;

        // Call wrapped function
        GetPylonVersion(arg0, arg1, arg2, arg3);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(PylonAutoInitTermWrap::GetPylonVersionString)
{
    if (info.Length() == 0)
    {
        // Call wrapped function
        const char* result = GetPylonVersionString();

        // Set return value
        info.GetReturnValue().Set(pylon_v8::FromGCString(result).ToLocalChecked());
    }
}

NAN_METHOD(PylonAutoInitTermWrap::PylonInitialize)
{
    if (info.Length() == 0)
    {
        // Call wrapped function
        PylonInitialize();

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(PylonAutoInitTermWrap::PylonTerminate)
{
    if ((info.Length() == 1) && info[0]->IsBoolean())
    {
        // Convert from boolean value
        bool arg0 = info[0]->BooleanValue();

        // Call wrapped function
        PylonTerminate(arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}
