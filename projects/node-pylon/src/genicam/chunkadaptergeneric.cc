// MIT License
// 
// Copyright (c) 2017 Bj√∂rn Rennfanz <bjoern@fam-rennfanz.de>
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// ----------------------------------------------------------------------------
// This is auto generated code by pylon-node-gen.
// Do not edit this file or all your changes will be lost after re-generation.
// ----------------------------------------------------------------------------

#include "chunkadaptergeneric.h"
#include "../pylon_v8.h"

using namespace v8;
using namespace GenApi_3_0_Basler_pylon_v5_0;

Nan::Persistent<FunctionTemplate> ChunkAdapterGenericWrap::prototype;
Nan::Persistent<Function> ChunkAdapterGenericWrap::constructor;

// Supported implementations
// CChunkAdapterGeneric(CChunkAdapterGeneric& const arg0)
// CChunkAdapterGeneric(INodeMap* pNodeMap, __int128_t MaxChunkCacheSize)
ChunkAdapterGenericWrap::ChunkAdapterGenericWrap(Nan::NAN_METHOD_ARGS_TYPE info)
  : m_ChunkAdapterGeneric(NULL)
{
    // Check constructor arguments
    if (info[0]->IsObject())
    {
        gcstring info0_constructor = pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName());
        if (info0_constructor != "CChunkAdapterGeneric")
        {
            ThrowException(Exception::TypeError(String::New("CChunkAdapterGeneric::CChunkAdapterGeneric: bad argument")));
        }

        // Unwrap obj
        ChunkAdapterGenericWrap* arg0_wrap = ObjectWrap::Unwrap<ChunkAdapterGenericWrap>(info[0]->ToObject());
        CChunkAdapterGeneric* arg0 = arg0_wrap->GetWrapped();

        // CChunkAdapterGeneric(CChunkAdapterGeneric& const arg0)
        m_ChunkAdapterGeneric = new CChunkAdapterGeneric(*arg0);
    }
    else if ((info[0]->IsObject()) && (info[1]->IsNumber()))
    {
        gcstring info0_constructor = pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName());
        if (info0_constructor != "INodeMap")
        {
            ThrowException(Exception::TypeError(String::New("CChunkAdapterGeneric::CChunkAdapterGeneric: bad argument")));
        }

        // Unwrap obj
        NodeMapWrap* arg0_wrap = ObjectWrap::Unwrap<NodeMapWrap>(info[0]->ToObject());
        INodeMap* arg0 = arg0_wrap->GetWrapped();

        // Convert number value
        __int128_t arg1 = static_cast<__int128_t>(info[1]->NumberValue());

        // CChunkAdapterGeneric(INodeMap* pNodeMap, __int128_t MaxChunkCacheSize)
        m_ChunkAdapterGeneric = new CChunkAdapterGeneric(arg0, arg1);
    }
}
