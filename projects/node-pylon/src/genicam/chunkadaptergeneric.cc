// MIT License
// 
// Copyright (c) 2017 Bj√∂rn Rennfanz <bjoern@fam-rennfanz.de>
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// ----------------------------------------------------------------------------
// This is auto generated code by pylon-node-gen.
// Do not edit this file or all your changes will be lost after re-generation.
// ----------------------------------------------------------------------------

#include "chunkadaptergeneric.h"
#include "../pylon_v8.h"

using namespace v8;
using namespace GenApi_3_0_Basler_pylon_v5_0;

Nan::Persistent<FunctionTemplate> ChunkAdapterGenericWrap::prototype;
Nan::Persistent<Function> ChunkAdapterGenericWrap::constructor;

// Supported implementations
// CChunkAdapterGeneric(CChunkAdapterGeneric& const arg0)
// CChunkAdapterGeneric(INodeMap* pNodeMap, __int128_t MaxChunkCacheSize)
ChunkAdapterGenericWrap::ChunkAdapterGenericWrap(Nan::NAN_METHOD_ARGS_TYPE info)
  : m_ChunkAdapterGeneric(NULL)
{
    // Check constructor arguments
    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CChunkAdapterGeneric")))
    {
        // Unwrap object
        ChunkAdapterGenericWrap* arg0_wrap = ObjectWrap::Unwrap<ChunkAdapterGenericWrap>(info[0]->ToObject());
        CChunkAdapterGeneric* arg0 = arg0_wrap->GetWrapped();

        // CChunkAdapterGeneric(CChunkAdapterGeneric& const arg0)
        m_ChunkAdapterGeneric = new CChunkAdapterGeneric(*arg0);
    }
    else if ((info.Length() == 2) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "INodeMap")) && info[1]->IsNumber())
    {
        // Unwrap object
        NodeMapWrap* arg0_wrap = ObjectWrap::Unwrap<NodeMapWrap>(info[0]->ToObject());
        INodeMap* arg0 = arg0_wrap->GetWrapped();

        // Convert from number value
        __int128_t arg1 = static_cast<__int128_t>(info[1]->NumberValue());

        // CChunkAdapterGeneric(INodeMap* pNodeMap, __int128_t MaxChunkCacheSize)
        m_ChunkAdapterGeneric = new CChunkAdapterGeneric(arg0, arg1);
    }
}

ChunkAdapterGenericWrap::~ChunkAdapterGenericWrap()
{
    delete m_ChunkAdapterGeneric;
}

NAN_MODULE_INIT(ChunkAdapterGenericWrap::Initialize)
{
    // Prepare constructor template
    Local <FunctionTemplate> tpl = Nan::New<FunctionTemplate>(New);
    tpl->SetClassName(Nan::New("ChunkAdapterGenericWrap").ToLocalChecked());
    tpl->InstanceTemplate()->SetInternalFieldCount(1);

    // Register prototypes to template
    Nan::SetPrototypeMethod(tpl, "checkBufferLayout", CheckBufferLayout);
    Nan::SetPrototypeMethod(tpl, "attachBuffer", AttachBuffer);

    // Register template in Node JS
    prototype.Reset(tpl);
    Local<Function> function = Nan::GetFunction(tpl).ToLocalChecked();
    constructor.Reset(function);
    Nan::Set(target, Nan::New("CChunkAdapterGeneric").ToLocalChecked(), function);
}

NAN_METHOD(ChunkAdapterGenericWrap::AttachBuffer)
{
    ChunkAdapterGenericWrap* wrappedChunkAdapterGeneric = ObjectWrap::Unwrap<ChunkAdapterGenericWrap>(info.This());
    CChunkAdapterGeneric* chunkAdapterGeneric = wrappedChunkAdapterGeneric->GetWrapped();

    if ((info.Length() == 4) && info[0]->IsString() && (info[1]->IsObject() && (pylon_v8::ToGCString(info[1]->ToObject()->GetConstructorName()) == "SingleChunkDataStr_t")) && info[2]->IsNumber() && (info[3]->IsObject() && (pylon_v8::ToGCString(info[3]->ToObject()->GetConstructorName()) == "AttachStatistics_t")))
    {
        // Convert from string value
        unsigned char* arg0 = static_cast<unsigned char*>(pylon_v8::ToGCString(info[0]->ToString()).c_str());

        // Unwrap object
        SingleChunkDataStrWrap* arg1_wrap = ObjectWrap::Unwrap<SingleChunkDataStrWrap>(info[1]->ToObject());
        SingleChunkDataStr_t* arg1 = arg1_wrap->GetWrapped();

        // Convert from number value
        __int128_t arg2 = static_cast<__int128_t>(info[2]->NumberValue());

        // Unwrap object
        AttachStatisticsWrap* arg3_wrap = ObjectWrap::Unwrap<AttachStatisticsWrap>(info[3]->ToObject());
        AttachStatistics_t* arg3 = arg3_wrap->GetWrapped();

        // Call wrapped method
        chunkAdapterGeneric->AttachBuffer(arg0, arg1, arg2, arg3);
    }
    else if ((info.Length() == 4) && info[0]->IsString() && (info[1]->IsObject() && (pylon_v8::ToGCString(info[1]->ToObject()->GetConstructorName()) == "SingleChunkData_t")) && info[2]->IsNumber() && (info[3]->IsObject() && (pylon_v8::ToGCString(info[3]->ToObject()->GetConstructorName()) == "AttachStatistics_t")))
    {
        // Convert from string value
        unsigned char* arg0 = static_cast<unsigned char*>(pylon_v8::ToGCString(info[0]->ToString()).c_str());

        // Unwrap object
        SingleChunkDataWrap* arg1_wrap = ObjectWrap::Unwrap<SingleChunkDataWrap>(info[1]->ToObject());
        SingleChunkData_t* arg1 = arg1_wrap->GetWrapped();

        // Convert from number value
        __int128_t arg2 = static_cast<__int128_t>(info[2]->NumberValue());

        // Unwrap object
        AttachStatisticsWrap* arg3_wrap = ObjectWrap::Unwrap<AttachStatisticsWrap>(info[3]->ToObject());
        AttachStatistics_t* arg3 = arg3_wrap->GetWrapped();

        // Call wrapped method
        chunkAdapterGeneric->AttachBuffer(arg0, arg1, arg2, arg3);
    }
    else if ((info.Length() == 3) && info[0]->IsString() && info[1]->IsNumber() && (info[2]->IsObject() && (pylon_v8::ToGCString(info[2]->ToObject()->GetConstructorName()) == "AttachStatistics_t")))
    {
        // Convert from string value
        unsigned char* arg0 = static_cast<unsigned char*>(pylon_v8::ToGCString(info[0]->ToString()).c_str());

        // Convert from number value
        __int128_t arg1 = static_cast<__int128_t>(info[1]->NumberValue());

        // Unwrap object
        AttachStatisticsWrap* arg2_wrap = ObjectWrap::Unwrap<AttachStatisticsWrap>(info[2]->ToObject());
        AttachStatistics_t* arg2 = arg2_wrap->GetWrapped();

        // Call wrapped method
        chunkAdapterGeneric->AttachBuffer(arg0, arg1, arg2);
    }
}

NAN_METHOD(ChunkAdapterGenericWrap::CheckBufferLayout)
{
    ChunkAdapterGenericWrap* wrappedChunkAdapterGeneric = ObjectWrap::Unwrap<ChunkAdapterGenericWrap>(info.This());
    CChunkAdapterGeneric* chunkAdapterGeneric = wrappedChunkAdapterGeneric->GetWrapped();

    if ((info.Length() == 2) && info[0]->IsString() && info[1]->IsNumber())
    {
        // Convert from string value
        unsigned char* arg0 = static_cast<unsigned char*>(pylon_v8::ToGCString(info[0]->ToString()).c_str());

        // Convert from number value
        __int128_t arg1 = static_cast<__int128_t>(info[1]->NumberValue());

        // Call wrapped method
        chunkAdapterGeneric->CheckBufferLayout(arg0, arg1);
    }
}
