// MIT License
// 
// Copyright (c) 2017 Bj√∂rn Rennfanz <bjoern@fam-rennfanz.de>
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// ----------------------------------------------------------------------------
// This is auto generated code by pylon-node-gen.
// Do not edit this file or all your changes will be lost after re-generation.
// ----------------------------------------------------------------------------

#include "gcstringvector.h"
#include "../pylon_v8.h"

using namespace v8;
using namespace GenApi_3_0_Basler_pylon_v5_0;
using namespace GenICam_3_0_Basler_pylon_v5_0;

Nan::Persistent<FunctionTemplate> GCStringVectorWrap::prototype;
Nan::Persistent<Function> GCStringVectorWrap::constructor;

// Supported implementations
// gcstring_vector()
// gcstring_vector(gcstring_vector& const obj)
// gcstring_vector(unsigned int uiSize, gcstring& const str)
GCStringVectorWrap::GCStringVectorWrap(Nan::NAN_METHOD_ARGS_TYPE info)
  : m_GCStringVector(NULL)
{
    // Check constructor arguments
    if (info.Length() == 0)
    {
        // gcstring_vector()
        m_GCStringVector = new gcstring_vector();
    }
    else if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "gcstring_vector")))
    {
        // Unwrap object
        GCStringVectorWrap* arg0_wrap = ObjectWrap::Unwrap<GCStringVectorWrap>(info[0]->ToObject());
        gcstring_vector* arg0 = arg0_wrap->GetWrapped();

        // gcstring_vector(gcstring_vector& const obj)
        m_GCStringVector = new gcstring_vector(*arg0);
    }
    else if ((info.Length() == 2) && info[0]->IsNumber() && (info[1]->IsObject() && (pylon_v8::ToGCString(info[1]->ToObject()->GetConstructorName()) == "gcstring")))
    {
        // Convert from number value
        unsigned int arg0 = static_cast<unsigned int>(info[0]->NumberValue());

        // Unwrap object
        GCStringWrap* arg1_wrap = ObjectWrap::Unwrap<GCStringWrap>(info[1]->ToObject());
        gcstring* arg1 = arg1_wrap->GetWrapped();

        // gcstring_vector(unsigned int uiSize, gcstring& const str)
        m_GCStringVector = new gcstring_vector(arg0, *arg1);
    }
}

GCStringVectorWrap::~GCStringVectorWrap()
{
    delete m_GCStringVector;
}

NAN_MODULE_INIT(GCStringVectorWrap::Initialize)
{
    // Prepare constructor template
    Local <FunctionTemplate> tpl = Nan::New<FunctionTemplate>(New);
    tpl->SetClassName(Nan::New("GCStringVectorWrap").ToLocalChecked());
    tpl->InstanceTemplate()->SetInternalFieldCount(1);

    // Register prototypes to template
    Nan::SetPrototypeMethod(tpl, "assign", assign);
    Nan::SetPrototypeMethod(tpl, "clear", clear);
    Nan::SetPrototypeMethod(tpl, "erase", erase);
    Nan::SetPrototypeMethod(tpl, "at", at);
    Nan::SetPrototypeMethod(tpl, "back", back);
    Nan::SetPrototypeMethod(tpl, "begin", begin);
    Nan::SetPrototypeMethod(tpl, "capacity", capacity);
    Nan::SetPrototypeMethod(tpl, "end", end);
    Nan::SetPrototypeMethod(tpl, "front", front);
    Nan::SetPrototypeMethod(tpl, "max_size", max_size);
    Nan::SetPrototypeMethod(tpl, "size", size);
    Nan::SetPrototypeMethod(tpl, "insert", insert);
    Nan::SetPrototypeMethod(tpl, "empty", empty);
    Nan::SetPrototypeMethod(tpl, "pop_back", pop_back);
    Nan::SetPrototypeMethod(tpl, "push_back", push_back);
    Nan::SetPrototypeMethod(tpl, "resize", resize);
    Nan::SetPrototypeMethod(tpl, "reserve", reserve);

    // Register template in Node JS
    prototype.Reset(tpl);
    Local<Function> function = Nan::GetFunction(tpl).ToLocalChecked();
    constructor.Reset(function);
    Nan::Set(target, Nan::New("gcstring_vector").ToLocalChecked(), function);
}

NAN_METHOD(GCStringVectorWrap::assign)
{
    GCStringVectorWrap* wrappedGCStringVector = ObjectWrap::Unwrap<GCStringVectorWrap>(info.This());
    gcstring_vector* gCStringVector = wrappedGCStringVector->GetWrapped();

    if ((info.Length() == 2) && info[0]->IsNumber() && (info[1]->IsObject() && (pylon_v8::ToGCString(info[1]->ToObject()->GetConstructorName()) == "gcstring")))
    {
        // Convert from number value
        unsigned int arg0 = static_cast<unsigned int>(info[0]->NumberValue());

        // Unwrap object
        GCStringWrap* arg1_wrap = ObjectWrap::Unwrap<GCStringWrap>(info[1]->ToObject());
        gcstring* arg1 = arg1_wrap->GetWrapped();

        // Call wrapped method
        gCStringVector->assign(arg0, *arg1);
    }
    else if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "gcstring_vector")))
    {
        // Unwrap object
        GCStringVectorWrap* arg0_wrap = ObjectWrap::Unwrap<GCStringVectorWrap>(info[0]->ToObject());
        gcstring_vector* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        gCStringVector->assign(*arg0);
    }
}

NAN_METHOD(GCStringVectorWrap::at)
{
    GCStringVectorWrap* wrappedGCStringVector = ObjectWrap::Unwrap<GCStringVectorWrap>(info.This());
    gcstring_vector* gCStringVector = wrappedGCStringVector->GetWrapped();

    if ((info.Length() == 1) && info[0]->IsNumber())
    {
        // Convert from number value
        unsigned int arg0 = static_cast<unsigned int>(info[0]->NumberValue());

        // Call wrapped method
        gCStringVector->at(arg0);
    }
    else if ((info.Length() == 1) && info[0]->IsNumber())
    {
        // Convert from number value
        unsigned int arg0 = static_cast<unsigned int>(info[0]->NumberValue());

        // Call wrapped method
        gCStringVector->at(arg0);
    }
}

NAN_METHOD(GCStringVectorWrap::back)
{
    GCStringVectorWrap* wrappedGCStringVector = ObjectWrap::Unwrap<GCStringVectorWrap>(info.This());
    gcstring_vector* gCStringVector = wrappedGCStringVector->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        gCStringVector->back();
    }
    else if (info.Length() == 0)
    {
        // Call wrapped method
        gCStringVector->back();
    }
}

NAN_METHOD(GCStringVectorWrap::begin)
{
    GCStringVectorWrap* wrappedGCStringVector = ObjectWrap::Unwrap<GCStringVectorWrap>(info.This());
    gcstring_vector* gCStringVector = wrappedGCStringVector->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        gCStringVector->begin();
    }
    else if (info.Length() == 0)
    {
        // Call wrapped method
        gCStringVector->begin();
    }
}

NAN_METHOD(GCStringVectorWrap::capacity)
{
    GCStringVectorWrap* wrappedGCStringVector = ObjectWrap::Unwrap<GCStringVectorWrap>(info.This());
    gcstring_vector* gCStringVector = wrappedGCStringVector->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        gCStringVector->capacity();
    }
}

NAN_METHOD(GCStringVectorWrap::clear)
{
    GCStringVectorWrap* wrappedGCStringVector = ObjectWrap::Unwrap<GCStringVectorWrap>(info.This());
    gcstring_vector* gCStringVector = wrappedGCStringVector->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        gCStringVector->clear();
    }
}

NAN_METHOD(GCStringVectorWrap::empty)
{
    GCStringVectorWrap* wrappedGCStringVector = ObjectWrap::Unwrap<GCStringVectorWrap>(info.This());
    gcstring_vector* gCStringVector = wrappedGCStringVector->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        gCStringVector->empty();
    }
}

NAN_METHOD(GCStringVectorWrap::end)
{
    GCStringVectorWrap* wrappedGCStringVector = ObjectWrap::Unwrap<GCStringVectorWrap>(info.This());
    gcstring_vector* gCStringVector = wrappedGCStringVector->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        gCStringVector->end();
    }
    else if (info.Length() == 0)
    {
        // Call wrapped method
        gCStringVector->end();
    }
}

NAN_METHOD(GCStringVectorWrap::erase)
{
    GCStringVectorWrap* wrappedGCStringVector = ObjectWrap::Unwrap<GCStringVectorWrap>(info.This());
    gcstring_vector* gCStringVector = wrappedGCStringVector->GetWrapped();

    if ((info.Length() == 1) && info[0]->IsNumber())
    {
        // Convert from number value
        unsigned int arg0 = static_cast<unsigned int>(info[0]->NumberValue());

        // Call wrapped method
        gCStringVector->erase(arg0);
    }
    else if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "iterator")))
    {
        // Unwrap object
        IteratorWrap* arg0_wrap = ObjectWrap::Unwrap<IteratorWrap>(info[0]->ToObject());
        iterator* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        gCStringVector->erase(arg0);
    }
}

NAN_METHOD(GCStringVectorWrap::front)
{
    GCStringVectorWrap* wrappedGCStringVector = ObjectWrap::Unwrap<GCStringVectorWrap>(info.This());
    gcstring_vector* gCStringVector = wrappedGCStringVector->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        gCStringVector->front();
    }
    else if (info.Length() == 0)
    {
        // Call wrapped method
        gCStringVector->front();
    }
}

NAN_METHOD(GCStringVectorWrap::insert)
{
    GCStringVectorWrap* wrappedGCStringVector = ObjectWrap::Unwrap<GCStringVectorWrap>(info.This());
    gcstring_vector* gCStringVector = wrappedGCStringVector->GetWrapped();

    if ((info.Length() == 2) && info[0]->IsNumber() && (info[1]->IsObject() && (pylon_v8::ToGCString(info[1]->ToObject()->GetConstructorName()) == "gcstring")))
    {
        // Convert from number value
        unsigned int arg0 = static_cast<unsigned int>(info[0]->NumberValue());

        // Unwrap object
        GCStringWrap* arg1_wrap = ObjectWrap::Unwrap<GCStringWrap>(info[1]->ToObject());
        gcstring* arg1 = arg1_wrap->GetWrapped();

        // Call wrapped method
        gCStringVector->insert(arg0, *arg1);
    }
    else if ((info.Length() == 2) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "iterator")) && (info[1]->IsObject() && (pylon_v8::ToGCString(info[1]->ToObject()->GetConstructorName()) == "gcstring")))
    {
        // Unwrap object
        IteratorWrap* arg0_wrap = ObjectWrap::Unwrap<IteratorWrap>(info[0]->ToObject());
        iterator* arg0 = arg0_wrap->GetWrapped();

        // Unwrap object
        GCStringWrap* arg1_wrap = ObjectWrap::Unwrap<GCStringWrap>(info[1]->ToObject());
        gcstring* arg1 = arg1_wrap->GetWrapped();

        // Call wrapped method
        gCStringVector->insert(arg0, *arg1);
    }
}

NAN_METHOD(GCStringVectorWrap::max_size)
{
    GCStringVectorWrap* wrappedGCStringVector = ObjectWrap::Unwrap<GCStringVectorWrap>(info.This());
    gcstring_vector* gCStringVector = wrappedGCStringVector->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        gCStringVector->max_size();
    }
}

NAN_METHOD(GCStringVectorWrap::pop_back)
{
    GCStringVectorWrap* wrappedGCStringVector = ObjectWrap::Unwrap<GCStringVectorWrap>(info.This());
    gcstring_vector* gCStringVector = wrappedGCStringVector->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        gCStringVector->pop_back();
    }
}

NAN_METHOD(GCStringVectorWrap::push_back)
{
    GCStringVectorWrap* wrappedGCStringVector = ObjectWrap::Unwrap<GCStringVectorWrap>(info.This());
    gcstring_vector* gCStringVector = wrappedGCStringVector->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "gcstring")))
    {
        // Unwrap object
        GCStringWrap* arg0_wrap = ObjectWrap::Unwrap<GCStringWrap>(info[0]->ToObject());
        gcstring* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        gCStringVector->push_back(*arg0);
    }
}

NAN_METHOD(GCStringVectorWrap::reserve)
{
    GCStringVectorWrap* wrappedGCStringVector = ObjectWrap::Unwrap<GCStringVectorWrap>(info.This());
    gcstring_vector* gCStringVector = wrappedGCStringVector->GetWrapped();

    if ((info.Length() == 1) && info[0]->IsNumber())
    {
        // Convert from number value
        unsigned int arg0 = static_cast<unsigned int>(info[0]->NumberValue());

        // Call wrapped method
        gCStringVector->reserve(arg0);
    }
}

NAN_METHOD(GCStringVectorWrap::resize)
{
    GCStringVectorWrap* wrappedGCStringVector = ObjectWrap::Unwrap<GCStringVectorWrap>(info.This());
    gcstring_vector* gCStringVector = wrappedGCStringVector->GetWrapped();

    if ((info.Length() == 2) && info[0]->IsNumber() && (info[1]->IsObject() && (pylon_v8::ToGCString(info[1]->ToObject()->GetConstructorName()) == "gcstring")))
    {
        // Convert from number value
        unsigned int arg0 = static_cast<unsigned int>(info[0]->NumberValue());

        // Unwrap object
        GCStringWrap* arg1_wrap = ObjectWrap::Unwrap<GCStringWrap>(info[1]->ToObject());
        gcstring* arg1 = arg1_wrap->GetWrapped();

        // Call wrapped method
        gCStringVector->resize(arg0, *arg1);
    }
}

NAN_METHOD(GCStringVectorWrap::size)
{
    GCStringVectorWrap* wrappedGCStringVector = ObjectWrap::Unwrap<GCStringVectorWrap>(info.This());
    gcstring_vector* gCStringVector = wrappedGCStringVector->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        gCStringVector->size();
    }
}
