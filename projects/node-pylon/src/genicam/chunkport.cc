// MIT License
// 
// Copyright (c) 2017 - 2018 Bj√∂rn Rennfanz <bjoern@fam-rennfanz.de>
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// ----------------------------------------------------------------------------
// This is auto generated code by pylon-node-gen.
// Do not edit this file or all your changes will be lost after re-generation.
// ----------------------------------------------------------------------------

#include "chunkport.h"
#include "../pylon_v8.h"

using namespace v8;
using namespace GenApi_3_0_Basler_pylon_v5_0;

Nan::Persistent<FunctionTemplate> ChunkPortWrap::prototype;
Nan::Persistent<Function> ChunkPortWrap::constructor;

// Supported implementations
// CChunkPort(IPort* pPort)
// CChunkPort(CChunkPort& const arg0)
ChunkPortWrap::ChunkPortWrap(Nan::NAN_METHOD_ARGS_TYPE info)
  : m_ChunkPort(NULL)
{
    // Check constructor arguments
    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "IPort")))
    {
        // Unwrap object
        PortWrap* arg0_wrap = ObjectWrap::Unwrap<PortWrap>(info[0]->ToObject());
        IPort* arg0 = arg0_wrap->GetWrapped();

        // CChunkPort(IPort* pPort)
        m_ChunkPort = new CChunkPort(arg0);
    }
    else if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CChunkPort")))
    {
        // Unwrap object
        ChunkPortWrap* arg0_wrap = ObjectWrap::Unwrap<ChunkPortWrap>(info[0]->ToObject());
        CChunkPort* arg0 = arg0_wrap->GetWrapped();

        // CChunkPort(CChunkPort& const arg0)
        m_ChunkPort = new CChunkPort(*arg0);
    }
}

ChunkPortWrap::~ChunkPortWrap()
{
    delete m_ChunkPort;
}

NAN_MODULE_INIT(ChunkPortWrap::Initialize)
{
    // Prepare constructor template
    Local <FunctionTemplate> tpl = Nan::New<FunctionTemplate>(New);
    tpl->SetClassName(Nan::New("ChunkPortWrap").ToLocalChecked());
    tpl->InstanceTemplate()->SetInternalFieldCount(1);

    // Register prototypes to template
    Nan::SetPrototypeMethod(tpl, "getAccessMode", GetAccessMode);
    Nan::SetPrototypeMethod(tpl, "getPrincipalInterfaceType", GetPrincipalInterfaceType);
    Nan::SetPrototypeMethod(tpl, "read", Read);
    Nan::SetPrototypeMethod(tpl, "write", Write);
    Nan::SetPrototypeMethod(tpl, "setPortImpl", SetPortImpl);
    Nan::SetPrototypeMethod(tpl, "getSwapEndianess", GetSwapEndianess);
    Nan::SetPrototypeMethod(tpl, "invalidateNode", InvalidateNode);
    Nan::SetPrototypeMethod(tpl, "attachPort", AttachPort);
    Nan::SetPrototypeMethod(tpl, "detachPort", DetachPort);
    Nan::SetPrototypeMethod(tpl, "attachChunk", AttachChunk);
    Nan::SetPrototypeMethod(tpl, "detachChunk", DetachChunk);
    Nan::SetPrototypeMethod(tpl, "getChunkIDLength", GetChunkIDLength);
    Nan::SetPrototypeMethod(tpl, "checkChunkID", CheckChunkID);
    Nan::SetPrototypeMethod(tpl, "updateBuffer", UpdateBuffer);
    Nan::SetPrototypeMethod(tpl, "clearCache", ClearCache);

    // Register template in Node JS
    prototype.Reset(tpl);
    Local<Function> function = Nan::GetFunction(tpl).ToLocalChecked();
    constructor.Reset(function);
    Nan::Set(target, Nan::New("CChunkPort").ToLocalChecked(), function);
}

NAN_METHOD(ChunkPortWrap::AttachChunk)
{
    ChunkPortWrap* wrappedChunkPort = ObjectWrap::Unwrap<ChunkPortWrap>(info.This());
    CChunkPort* chunkPort = wrappedChunkPort->GetWrapped();

    if ((info.Length() == 4) && info[0]->IsString() && info[1]->IsNumber() && info[2]->IsNumber() && info[3]->IsBoolean())
    {
        // Convert from string value
        unsigned char* arg0 = static_cast<unsigned char*>(pylon_v8::ToGCString(info[0]->ToString()).c_str());

        // Convert from number value
        __int128_t arg1 = static_cast<__int128_t>(info[1]->NumberValue());

        // Convert from number value
        __int128_t arg2 = static_cast<__int128_t>(info[2]->NumberValue());

        // Convert from boolean value
        bool arg3 = info[3]->BooleanValue();

        // Call wrapped method
        chunkPort->AttachChunk(arg0, arg1, arg2, arg3);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ChunkPortWrap::AttachPort)
{
    ChunkPortWrap* wrappedChunkPort = ObjectWrap::Unwrap<ChunkPortWrap>(info.This());
    CChunkPort* chunkPort = wrappedChunkPort->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "IPort")))
    {
        // Unwrap object
        PortWrap* arg0_wrap = ObjectWrap::Unwrap<PortWrap>(info[0]->ToObject());
        IPort* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        bool result = chunkPort->AttachPort(arg0);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
}

NAN_METHOD(ChunkPortWrap::CheckChunkID)
{
    ChunkPortWrap* wrappedChunkPort = ObjectWrap::Unwrap<ChunkPortWrap>(info.This());
    CChunkPort* chunkPort = wrappedChunkPort->GetWrapped();

    if ((info.Length() == 2) && info[0]->IsString() && info[1]->IsNumber())
    {
        // Convert from string value
        unsigned char* arg0 = static_cast<unsigned char*>(pylon_v8::ToGCString(info[0]->ToString()).c_str());

        // Convert from number value
        int arg1 = static_cast<int>(info[1]->NumberValue());

        // Call wrapped method
        bool result = chunkPort->CheckChunkID(arg0, arg1);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
    else if ((info.Length() == 1) && info[0]->IsNumber())
    {
        // Convert from number value
        __uint128_t arg0 = static_cast<__uint128_t>(info[0]->NumberValue());

        // Call wrapped method
        bool result = chunkPort->CheckChunkID(arg0);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
}

NAN_METHOD(ChunkPortWrap::ClearCache)
{
    ChunkPortWrap* wrappedChunkPort = ObjectWrap::Unwrap<ChunkPortWrap>(info.This());
    CChunkPort* chunkPort = wrappedChunkPort->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        chunkPort->ClearCache();

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ChunkPortWrap::DetachChunk)
{
    ChunkPortWrap* wrappedChunkPort = ObjectWrap::Unwrap<ChunkPortWrap>(info.This());
    CChunkPort* chunkPort = wrappedChunkPort->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        chunkPort->DetachChunk();

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ChunkPortWrap::DetachPort)
{
    ChunkPortWrap* wrappedChunkPort = ObjectWrap::Unwrap<ChunkPortWrap>(info.This());
    CChunkPort* chunkPort = wrappedChunkPort->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        chunkPort->DetachPort();

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ChunkPortWrap::GetAccessMode)
{
    ChunkPortWrap* wrappedChunkPort = ObjectWrap::Unwrap<ChunkPortWrap>(info.This());
    CChunkPort* chunkPort = wrappedChunkPort->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        EAccessMode result = chunkPort->GetAccessMode();

        // Set return value
        info.GetReturnValue().Set(Nan::New<Number>(result));
    }
}

NAN_METHOD(ChunkPortWrap::GetChunkIDLength)
{
    ChunkPortWrap* wrappedChunkPort = ObjectWrap::Unwrap<ChunkPortWrap>(info.This());
    CChunkPort* chunkPort = wrappedChunkPort->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        int result = chunkPort->GetChunkIDLength();

        // Set return value
        info.GetReturnValue().Set(Nan::New<Number>(result));
    }
}

NAN_METHOD(ChunkPortWrap::GetPrincipalInterfaceType)
{
    ChunkPortWrap* wrappedChunkPort = ObjectWrap::Unwrap<ChunkPortWrap>(info.This());
    CChunkPort* chunkPort = wrappedChunkPort->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        EInterfaceType result = chunkPort->GetPrincipalInterfaceType();

        // Set return value
        info.GetReturnValue().Set(Nan::New<Number>(result));
    }
}

NAN_METHOD(ChunkPortWrap::GetSwapEndianess)
{
    ChunkPortWrap* wrappedChunkPort = ObjectWrap::Unwrap<ChunkPortWrap>(info.This());
    CChunkPort* chunkPort = wrappedChunkPort->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        EYesNo result = chunkPort->GetSwapEndianess();

        // Set return value
        info.GetReturnValue().Set(Nan::New<Number>(result));
    }
}

NAN_METHOD(ChunkPortWrap::InvalidateNode)
{
    ChunkPortWrap* wrappedChunkPort = ObjectWrap::Unwrap<ChunkPortWrap>(info.This());
    CChunkPort* chunkPort = wrappedChunkPort->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        chunkPort->InvalidateNode();

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ChunkPortWrap::Read)
{
    ChunkPortWrap* wrappedChunkPort = ObjectWrap::Unwrap<ChunkPortWrap>(info.This());
    CChunkPort* chunkPort = wrappedChunkPort->GetWrapped();

    if ((info.Length() == 3) && info[0]->IsObject() && info[1]->IsNumber() && info[2]->IsNumber())
    {
        // TODO: Implement wrapper for void

        // Convert from number value
        __int128_t arg1 = static_cast<__int128_t>(info[1]->NumberValue());

        // Convert from number value
        __int128_t arg2 = static_cast<__int128_t>(info[2]->NumberValue());

        // Call wrapped method
        chunkPort->Read(arg0, arg1, arg2);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ChunkPortWrap::SetPortImpl)
{
    ChunkPortWrap* wrappedChunkPort = ObjectWrap::Unwrap<ChunkPortWrap>(info.This());
    CChunkPort* chunkPort = wrappedChunkPort->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "IPort")))
    {
        // Unwrap object
        PortWrap* arg0_wrap = ObjectWrap::Unwrap<PortWrap>(info[0]->ToObject());
        IPort* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        chunkPort->SetPortImpl(arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ChunkPortWrap::UpdateBuffer)
{
    ChunkPortWrap* wrappedChunkPort = ObjectWrap::Unwrap<ChunkPortWrap>(info.This());
    CChunkPort* chunkPort = wrappedChunkPort->GetWrapped();

    if ((info.Length() == 1) && info[0]->IsString())
    {
        // Convert from string value
        unsigned char* arg0 = static_cast<unsigned char*>(pylon_v8::ToGCString(info[0]->ToString()).c_str());

        // Call wrapped method
        chunkPort->UpdateBuffer(arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ChunkPortWrap::Write)
{
    ChunkPortWrap* wrappedChunkPort = ObjectWrap::Unwrap<ChunkPortWrap>(info.This());
    CChunkPort* chunkPort = wrappedChunkPort->GetWrapped();

    if ((info.Length() == 3) && info[0]->IsObject() && info[1]->IsNumber() && info[2]->IsNumber())
    {
        // TODO: Implement wrapper for void

        // Convert from number value
        __int128_t arg1 = static_cast<__int128_t>(info[1]->NumberValue());

        // Convert from number value
        __int128_t arg2 = static_cast<__int128_t>(info[2]->NumberValue());

        // Call wrapped method
        chunkPort->Write(arg0, arg1, arg2);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}
