// MIT License
// 
// Copyright (c) 2017 Bj√∂rn Rennfanz <bjoern@fam-rennfanz.de>
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// ----------------------------------------------------------------------------
// This is auto generated code by pylon-node-gen.
// Do not edit this file or all your changes will be lost after re-generation.
// ----------------------------------------------------------------------------

#include "chunkport.h"
#include "../pylon_v8.h"

using namespace v8;
using namespace GenApi_3_0_Basler_pylon_v5_0;

Nan::Persistent<FunctionTemplate> ChunkPortWrap::prototype;
Nan::Persistent<Function> ChunkPortWrap::constructor;

// Supported implementations
// CChunkPort(IPort* pPort)
// CChunkPort(CChunkPort& const arg0)
ChunkPortWrap::ChunkPortWrap(Nan::NAN_METHOD_ARGS_TYPE info)
  : m_ChunkPort(NULL)
{
    // Check constructor arguments
    if (info[0]->IsObject())
    {
        gcstring info0_constructor = pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName());
        if (info0_constructor != "IPort")
        {
            ThrowException(Exception::TypeError(String::New("CChunkPort::CChunkPort: bad argument")));
        }

        // Unwrap obj
        PortWrap* arg0_wrap = ObjectWrap::Unwrap<PortWrap>(info[0]->ToObject());
        IPort* arg0 = arg0_wrap->GetWrapped();

        // CChunkPort(IPort* pPort)
        m_ChunkPort = new CChunkPort(arg0);
    }
    else if (info[0]->IsObject())
    {
        gcstring info0_constructor = pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName());
        if (info0_constructor != "CChunkPort")
        {
            ThrowException(Exception::TypeError(String::New("CChunkPort::CChunkPort: bad argument")));
        }

        // Unwrap obj
        ChunkPortWrap* arg0_wrap = ObjectWrap::Unwrap<ChunkPortWrap>(info[0]->ToObject());
        CChunkPort* arg0 = arg0_wrap->GetWrapped();

        // CChunkPort(CChunkPort& const arg0)
        m_ChunkPort = new CChunkPort(*arg0);
    }
}

ChunkPortWrap::~ChunkPortWrap()
{
    delete m_ChunkPort;
}

NAN_MODULE_INIT(ChunkPortWrap::Initialize)
{
    // Prepare constructor template
    Local <FunctionTemplate> tpl = Nan::New<FunctionTemplate>(New);
    tpl->SetClassName(Nan::New("ChunkPortWrap").ToLocalChecked());
    tpl->InstanceTemplate()->SetInternalFieldCount(1);

    // Register prototypes to template
    Nan::SetPrototypeMethod(tpl, "getAccessMode", GetAccessMode);
    Nan::SetPrototypeMethod(tpl, "getPrincipalInterfaceType", GetPrincipalInterfaceType);
    Nan::SetPrototypeMethod(tpl, "read", Read);
    Nan::SetPrototypeMethod(tpl, "write", Write);
    Nan::SetPrototypeMethod(tpl, "setPortImpl", SetPortImpl);
    Nan::SetPrototypeMethod(tpl, "getSwapEndianess", GetSwapEndianess);
    Nan::SetPrototypeMethod(tpl, "invalidateNode", InvalidateNode);
    Nan::SetPrototypeMethod(tpl, "attachPort", AttachPort);
    Nan::SetPrototypeMethod(tpl, "detachPort", DetachPort);
    Nan::SetPrototypeMethod(tpl, "attachChunk", AttachChunk);
    Nan::SetPrototypeMethod(tpl, "detachChunk", DetachChunk);
    Nan::SetPrototypeMethod(tpl, "getChunkIDLength", GetChunkIDLength);
    Nan::SetPrototypeMethod(tpl, "checkChunkID", CheckChunkID);
    Nan::SetPrototypeMethod(tpl, "updateBuffer", UpdateBuffer);
    Nan::SetPrototypeMethod(tpl, "clearCache", ClearCache);

    // Register template in Node JS
    prototype.Reset(tpl);
    Local<Function> function = Nan::GetFunction(tpl).ToLocalChecked();
    constructor.Reset(function);
    Nan::Set(target, Nan::New("CChunkPort").ToLocalChecked(), function);
}
