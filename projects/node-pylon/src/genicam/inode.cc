// MIT License
// 
// Copyright (c) 2017 Bj√∂rn Rennfanz <bjoern@fam-rennfanz.de>
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// ----------------------------------------------------------------------------
// This is auto generated code by pylon-node-gen.
// Do not edit this file or all your changes will be lost after re-generation.
// ----------------------------------------------------------------------------

#include "inode.h"
#include "../pylon_v8.h"

using namespace v8;
using namespace GenApi_3_0_Basler_pylon_v5_0;

Nan::Persistent<FunctionTemplate> NodeWrap::prototype;
Nan::Persistent<Function> NodeWrap::constructor;

// Supported implementations
// INode()
// INode(INode& const arg0)
NodeWrap::NodeWrap(Nan::NAN_METHOD_ARGS_TYPE info)
  : m_Node(NULL)
{
    // Check constructor arguments
    if (info.Length() == 0)
    {
        // INode()
        m_Node = new INode();
    }
    else if (info[0]->IsObject())
    {
        gcstring info0_constructor = pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName());
        if (info0_constructor != "INode")
        {
            ThrowException(Exception::TypeError(String::New("INode::INode: bad argument")));
        }

        // Unwrap obj
        NodeWrap* arg0_wrap = ObjectWrap::Unwrap<NodeWrap>(info[0]->ToObject());
        INode* arg0 = arg0_wrap->GetWrapped();

        // INode(INode& const arg0)
        m_Node = new INode(*arg0);
    }
}

NodeWrap::~NodeWrap()
{
    delete m_Node;
}

NAN_MODULE_INIT(NodeWrap::Initialize)
{
    // Prepare constructor template
    Local <FunctionTemplate> tpl = Nan::New<FunctionTemplate>(New);
    tpl->SetClassName(Nan::New("NodeWrap").ToLocalChecked());
    tpl->InstanceTemplate()->SetInternalFieldCount(1);

    // Register prototypes to template
    Nan::SetPrototypeMethod(tpl, "getName", GetName);
    Nan::SetPrototypeMethod(tpl, "getNameSpace", GetNameSpace);
    Nan::SetPrototypeMethod(tpl, "getVisibility", GetVisibility);
    Nan::SetPrototypeMethod(tpl, "invalidateNode", InvalidateNode);
    Nan::SetPrototypeMethod(tpl, "isCachable", IsCachable);
    Nan::SetPrototypeMethod(tpl, "isAccessModeCacheable", IsAccessModeCacheable);
    Nan::SetPrototypeMethod(tpl, "getCachingMode", GetCachingMode);
    Nan::SetPrototypeMethod(tpl, "getPollingTime", GetPollingTime);
    Nan::SetPrototypeMethod(tpl, "getToolTip", GetToolTip);
    Nan::SetPrototypeMethod(tpl, "getDescription", GetDescription);
    Nan::SetPrototypeMethod(tpl, "getDisplayName", GetDisplayName);
    Nan::SetPrototypeMethod(tpl, "getDeviceName", GetDeviceName);
    Nan::SetPrototypeMethod(tpl, "getChildren", GetChildren);
    Nan::SetPrototypeMethod(tpl, "getParents", GetParents);
    Nan::SetPrototypeMethod(tpl, "registerCallback", RegisterCallback);
    Nan::SetPrototypeMethod(tpl, "deregisterCallback", DeregisterCallback);
    Nan::SetPrototypeMethod(tpl, "getNodeMap", GetNodeMap);
    Nan::SetPrototypeMethod(tpl, "getEventID", GetEventID);
    Nan::SetPrototypeMethod(tpl, "isStreamable", IsStreamable);
    Nan::SetPrototypeMethod(tpl, "getPropertyNames", GetPropertyNames);
    Nan::SetPrototypeMethod(tpl, "getProperty", GetProperty);
    Nan::SetPrototypeMethod(tpl, "imposeAccessMode", ImposeAccessMode);
    Nan::SetPrototypeMethod(tpl, "imposeVisibility", ImposeVisibility);
    Nan::SetPrototypeMethod(tpl, "getAlias", GetAlias);
    Nan::SetPrototypeMethod(tpl, "getCastAlias", GetCastAlias);
    Nan::SetPrototypeMethod(tpl, "getDocuURL", GetDocuURL);
    Nan::SetPrototypeMethod(tpl, "isDeprecated", IsDeprecated);
    Nan::SetPrototypeMethod(tpl, "getPrincipalInterfaceType", GetPrincipalInterfaceType);
    Nan::SetPrototypeMethod(tpl, "isFeature", IsFeature);

    // Register template in Node JS
    prototype.Reset(tpl);
    Local<Function> function = Nan::GetFunction(tpl).ToLocalChecked();
    constructor.Reset(function);
    Nan::Set(target, Nan::New("INode").ToLocalChecked(), function);

    // Register static functions in Node JS
    Nan::Set(target, Nan::New<String>("isReadable").ToLocalChecked(), Nan::GetFunction(Nan::New<FunctionTemplate>(NodeWrap::IsReadable)).ToLocalChecked());
    Nan::Set(target, Nan::New<String>("isWritable").ToLocalChecked(), Nan::GetFunction(Nan::New<FunctionTemplate>(NodeWrap::IsWritable)).ToLocalChecked());
    Nan::Set(target, Nan::New<String>("isImplemented").ToLocalChecked(), Nan::GetFunction(Nan::New<FunctionTemplate>(NodeWrap::IsImplemented)).ToLocalChecked());
    Nan::Set(target, Nan::New<String>("isAvailable").ToLocalChecked(), Nan::GetFunction(Nan::New<FunctionTemplate>(NodeWrap::IsAvailable)).ToLocalChecked());
    Nan::Set(target, Nan::New<String>("combine").ToLocalChecked(), Nan::GetFunction(Nan::New<FunctionTemplate>(NodeWrap::Combine)).ToLocalChecked());
    Nan::Set(target, Nan::New<String>("isVisible").ToLocalChecked(), Nan::GetFunction(Nan::New<FunctionTemplate>(NodeWrap::IsVisible)).ToLocalChecked());
    Nan::Set(target, Nan::New<String>("isCacheable").ToLocalChecked(), Nan::GetFunction(Nan::New<FunctionTemplate>(NodeWrap::IsCacheable)).ToLocalChecked());
}
