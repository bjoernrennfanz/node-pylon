// MIT License
// 
// Copyright (c) 2017 - 2018 Bj√∂rn Rennfanz <bjoern@fam-rennfanz.de>
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// ----------------------------------------------------------------------------
// This is auto generated code by pylon-node-gen.
// Do not edit this file or all your changes will be lost after re-generation.
// ----------------------------------------------------------------------------

#include "inode.h"
#include "../pylon_v8.h"

using namespace v8;
using namespace GenApi_3_0_Basler_pylon_v5_0;
using namespace GenICam_3_0_Basler_pylon_v5_0;

Nan::Persistent<FunctionTemplate> NodeWrap::prototype;
Nan::Persistent<Function> NodeWrap::constructor;

// Supported implementations
// INode()
// INode(INode& const arg0)
NodeWrap::NodeWrap(Nan::NAN_METHOD_ARGS_TYPE info)
  : m_Node(NULL)
{
    // Check constructor arguments
    if (info.Length() == 0)
    {
        // INode()
        m_Node = new INode();
    }
    else if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "INode")))
    {
        // Unwrap object
        NodeWrap* arg0_wrap = ObjectWrap::Unwrap<NodeWrap>(info[0]->ToObject());
        INode* arg0 = arg0_wrap->GetWrapped();

        // INode(INode& const arg0)
        m_Node = new INode(*arg0);
    }
}

NodeWrap::~NodeWrap()
{
    delete m_Node;
}

NAN_MODULE_INIT(NodeWrap::Initialize)
{
    // Prepare constructor template
    Local <FunctionTemplate> tpl = Nan::New<FunctionTemplate>(New);
    tpl->SetClassName(Nan::New("NodeWrap").ToLocalChecked());
    tpl->InstanceTemplate()->SetInternalFieldCount(1);

    // Register prototypes to template
    Nan::SetPrototypeMethod(tpl, "getName", GetName);
    Nan::SetPrototypeMethod(tpl, "getNameSpace", GetNameSpace);
    Nan::SetPrototypeMethod(tpl, "getVisibility", GetVisibility);
    Nan::SetPrototypeMethod(tpl, "invalidateNode", InvalidateNode);
    Nan::SetPrototypeMethod(tpl, "isCachable", IsCachable);
    Nan::SetPrototypeMethod(tpl, "isAccessModeCacheable", IsAccessModeCacheable);
    Nan::SetPrototypeMethod(tpl, "getCachingMode", GetCachingMode);
    Nan::SetPrototypeMethod(tpl, "getPollingTime", GetPollingTime);
    Nan::SetPrototypeMethod(tpl, "getToolTip", GetToolTip);
    Nan::SetPrototypeMethod(tpl, "getDescription", GetDescription);
    Nan::SetPrototypeMethod(tpl, "getDisplayName", GetDisplayName);
    Nan::SetPrototypeMethod(tpl, "getDeviceName", GetDeviceName);
    Nan::SetPrototypeMethod(tpl, "getChildren", GetChildren);
    Nan::SetPrototypeMethod(tpl, "getParents", GetParents);
    Nan::SetPrototypeMethod(tpl, "registerCallback", RegisterCallback);
    Nan::SetPrototypeMethod(tpl, "deregisterCallback", DeregisterCallback);
    Nan::SetPrototypeMethod(tpl, "getNodeMap", GetNodeMap);
    Nan::SetPrototypeMethod(tpl, "getEventID", GetEventID);
    Nan::SetPrototypeMethod(tpl, "isStreamable", IsStreamable);
    Nan::SetPrototypeMethod(tpl, "getPropertyNames", GetPropertyNames);
    Nan::SetPrototypeMethod(tpl, "getProperty", GetProperty);
    Nan::SetPrototypeMethod(tpl, "imposeAccessMode", ImposeAccessMode);
    Nan::SetPrototypeMethod(tpl, "imposeVisibility", ImposeVisibility);
    Nan::SetPrototypeMethod(tpl, "getAlias", GetAlias);
    Nan::SetPrototypeMethod(tpl, "getCastAlias", GetCastAlias);
    Nan::SetPrototypeMethod(tpl, "getDocuURL", GetDocuURL);
    Nan::SetPrototypeMethod(tpl, "isDeprecated", IsDeprecated);
    Nan::SetPrototypeMethod(tpl, "getPrincipalInterfaceType", GetPrincipalInterfaceType);
    Nan::SetPrototypeMethod(tpl, "isFeature", IsFeature);

    // Register template in Node JS
    prototype.Reset(tpl);
    Local<Function> function = Nan::GetFunction(tpl).ToLocalChecked();
    constructor.Reset(function);
    Nan::Set(target, Nan::New("INode").ToLocalChecked(), function);

    // Register static functions in Node JS
    Nan::Set(target, Nan::New<String>("isReadable").ToLocalChecked(), Nan::GetFunction(Nan::New<FunctionTemplate>(NodeWrap::IsReadable)).ToLocalChecked());
    Nan::Set(target, Nan::New<String>("isWritable").ToLocalChecked(), Nan::GetFunction(Nan::New<FunctionTemplate>(NodeWrap::IsWritable)).ToLocalChecked());
    Nan::Set(target, Nan::New<String>("isImplemented").ToLocalChecked(), Nan::GetFunction(Nan::New<FunctionTemplate>(NodeWrap::IsImplemented)).ToLocalChecked());
    Nan::Set(target, Nan::New<String>("isAvailable").ToLocalChecked(), Nan::GetFunction(Nan::New<FunctionTemplate>(NodeWrap::IsAvailable)).ToLocalChecked());
    Nan::Set(target, Nan::New<String>("combine").ToLocalChecked(), Nan::GetFunction(Nan::New<FunctionTemplate>(NodeWrap::Combine)).ToLocalChecked());
    Nan::Set(target, Nan::New<String>("isVisible").ToLocalChecked(), Nan::GetFunction(Nan::New<FunctionTemplate>(NodeWrap::IsVisible)).ToLocalChecked());
    Nan::Set(target, Nan::New<String>("isCacheable").ToLocalChecked(), Nan::GetFunction(Nan::New<FunctionTemplate>(NodeWrap::IsCacheable)).ToLocalChecked());
}

NAN_METHOD(NodeWrap::DeregisterCallback)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if ((info.Length() == 1) && info[0]->IsNumber())
    {
        // Convert from number value
        int arg0 = static_cast<int>(info[0]->NumberValue());

        // Call wrapped method
        bool result = node->DeregisterCallback(arg0);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
}

NAN_METHOD(NodeWrap::GetAlias)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        node->GetAlias();
    }
}

NAN_METHOD(NodeWrap::GetCachingMode)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        ECachingMode result = node->GetCachingMode();

        // Set return value
        info.GetReturnValue().Set(Nan::New<Number>(result));
    }
}

NAN_METHOD(NodeWrap::GetCastAlias)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        node->GetCastAlias();
    }
}

NAN_METHOD(NodeWrap::GetChildren)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if ((info.Length() == 2) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "node_vector")) && info[1]->IsNumber())
    {
        // Unwrap object
        NodeVectorWrap* arg0_wrap = ObjectWrap::Unwrap<NodeVectorWrap>(info[0]->ToObject());
        node_vector* arg0 = arg0_wrap->GetWrapped();

        // Convert from number value
        ELinkType arg1 = static_cast<ELinkType>(info[1]->NumberValue());

        // Call wrapped method
        node->GetChildren(*arg0, arg1);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(NodeWrap::GetDescription)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        node->GetDescription();
    }
}

NAN_METHOD(NodeWrap::GetDeviceName)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        node->GetDeviceName();
    }
}

NAN_METHOD(NodeWrap::GetDisplayName)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        node->GetDisplayName();
    }
}

NAN_METHOD(NodeWrap::GetDocuURL)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        node->GetDocuURL();
    }
}

NAN_METHOD(NodeWrap::GetEventID)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        node->GetEventID();
    }
}

NAN_METHOD(NodeWrap::GetName)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if ((info.Length() == 1) && info[0]->IsBoolean())
    {
        // Convert from boolean value
        bool arg0 = info[0]->BooleanValue();

        // Call wrapped method
        node->GetName(arg0);
    }
}

NAN_METHOD(NodeWrap::GetNameSpace)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        ENameSpace result = node->GetNameSpace();

        // Set return value
        info.GetReturnValue().Set(Nan::New<Number>(result));
    }
}

NAN_METHOD(NodeWrap::GetNodeMap)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        node->GetNodeMap();
    }
}

NAN_METHOD(NodeWrap::GetParents)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "node_vector")))
    {
        // Unwrap object
        NodeVectorWrap* arg0_wrap = ObjectWrap::Unwrap<NodeVectorWrap>(info[0]->ToObject());
        node_vector* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        node->GetParents(*arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(NodeWrap::GetPollingTime)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        __int128_t result = node->GetPollingTime();

        // Set return value
        info.GetReturnValue().Set(Nan::New<Number>(result));
    }
}

NAN_METHOD(NodeWrap::GetPrincipalInterfaceType)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        EInterfaceType result = node->GetPrincipalInterfaceType();

        // Set return value
        info.GetReturnValue().Set(Nan::New<Number>(result));
    }
}

NAN_METHOD(NodeWrap::GetProperty)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if ((info.Length() == 3) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "gcstring")) && (info[1]->IsObject() && (pylon_v8::ToGCString(info[1]->ToObject()->GetConstructorName()) == "gcstring")) && (info[2]->IsObject() && (pylon_v8::ToGCString(info[2]->ToObject()->GetConstructorName()) == "gcstring")))
    {
        // Unwrap object
        GCStringWrap* arg0_wrap = ObjectWrap::Unwrap<GCStringWrap>(info[0]->ToObject());
        gcstring* arg0 = arg0_wrap->GetWrapped();

        // Unwrap object
        GCStringWrap* arg1_wrap = ObjectWrap::Unwrap<GCStringWrap>(info[1]->ToObject());
        gcstring* arg1 = arg1_wrap->GetWrapped();

        // Unwrap object
        GCStringWrap* arg2_wrap = ObjectWrap::Unwrap<GCStringWrap>(info[2]->ToObject());
        gcstring* arg2 = arg2_wrap->GetWrapped();

        // Call wrapped method
        bool result = node->GetProperty(*arg0, *arg1, *arg2);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
}

NAN_METHOD(NodeWrap::GetPropertyNames)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "gcstring_vector")))
    {
        // Unwrap object
        GCStringVectorWrap* arg0_wrap = ObjectWrap::Unwrap<GCStringVectorWrap>(info[0]->ToObject());
        gcstring_vector* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        node->GetPropertyNames(*arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(NodeWrap::GetToolTip)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        node->GetToolTip();
    }
}

NAN_METHOD(NodeWrap::GetVisibility)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        EVisibility result = node->GetVisibility();

        // Set return value
        info.GetReturnValue().Set(Nan::New<Number>(result));
    }
}

NAN_METHOD(NodeWrap::ImposeAccessMode)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if ((info.Length() == 1) && info[0]->IsNumber())
    {
        // Convert from number value
        EAccessMode arg0 = static_cast<EAccessMode>(info[0]->NumberValue());

        // Call wrapped method
        node->ImposeAccessMode(arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(NodeWrap::ImposeVisibility)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if ((info.Length() == 1) && info[0]->IsNumber())
    {
        // Convert from number value
        EVisibility arg0 = static_cast<EVisibility>(info[0]->NumberValue());

        // Call wrapped method
        node->ImposeVisibility(arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(NodeWrap::InvalidateNode)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        node->InvalidateNode();

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(NodeWrap::IsAccessModeCacheable)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        EYesNo result = node->IsAccessModeCacheable();

        // Set return value
        info.GetReturnValue().Set(Nan::New<Number>(result));
    }
}

NAN_METHOD(NodeWrap::IsCachable)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        bool result = node->IsCachable();

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
}

NAN_METHOD(NodeWrap::IsDeprecated)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        bool result = node->IsDeprecated();

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
}

NAN_METHOD(NodeWrap::IsFeature)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        bool result = node->IsFeature();

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
}

NAN_METHOD(NodeWrap::IsStreamable)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        bool result = node->IsStreamable();

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
}

NAN_METHOD(NodeWrap::RegisterCallback)
{
    NodeWrap* wrappedNode = ObjectWrap::Unwrap<NodeWrap>(info.This());
    INode* node = wrappedNode->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CNodeCallback")))
    {
        // Unwrap object
        NodeCallbackWrap* arg0_wrap = ObjectWrap::Unwrap<NodeCallbackWrap>(info[0]->ToObject());
        CNodeCallback* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        int result = node->RegisterCallback(arg0);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Number>(result));
    }
}

NAN_METHOD(NodeWrap::Combine)
{
    if ((info.Length() == 2) && info[0]->IsNumber() && info[1]->IsNumber())
    {
        // Convert from number value
        EAccessMode arg0 = static_cast<EAccessMode>(info[0]->NumberValue());

        // Convert from number value
        EAccessMode arg1 = static_cast<EAccessMode>(info[1]->NumberValue());

        // Call wrapped function
        EAccessMode result = Combine(arg0, arg1);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Number>(result));
    }
    else if ((info.Length() == 2) && info[0]->IsNumber() && info[1]->IsNumber())
    {
        // Convert from number value
        EVisibility arg0 = static_cast<EVisibility>(info[0]->NumberValue());

        // Convert from number value
        EVisibility arg1 = static_cast<EVisibility>(info[1]->NumberValue());

        // Call wrapped function
        EVisibility result = Combine(arg0, arg1);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Number>(result));
    }
    else if ((info.Length() == 2) && info[0]->IsNumber() && info[1]->IsNumber())
    {
        // Convert from number value
        ECachingMode arg0 = static_cast<ECachingMode>(info[0]->NumberValue());

        // Convert from number value
        ECachingMode arg1 = static_cast<ECachingMode>(info[1]->NumberValue());

        // Call wrapped function
        ECachingMode result = Combine(arg0, arg1);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Number>(result));
    }
}

NAN_METHOD(NodeWrap::IsAvailable)
{
    if ((info.Length() == 1) && info[0]->IsNumber())
    {
        // Convert from number value
        EAccessMode arg0 = static_cast<EAccessMode>(info[0]->NumberValue());

        // Call wrapped function
        bool result = IsAvailable(arg0);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
    else if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "IBase")))
    {
        // Unwrap object
        BaseWrap* arg0_wrap = ObjectWrap::Unwrap<BaseWrap>(info[0]->ToObject());
        IBase* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped function
        bool result = IsAvailable(arg0);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
    else if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "IBase")))
    {
        // Unwrap object
        BaseWrap* arg0_wrap = ObjectWrap::Unwrap<BaseWrap>(info[0]->ToObject());
        IBase* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped function
        bool result = IsAvailable(*arg0);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
}

NAN_METHOD(NodeWrap::IsCacheable)
{
    if ((info.Length() == 1) && info[0]->IsNumber())
    {
        // Convert from number value
        ECachingMode arg0 = static_cast<ECachingMode>(info[0]->NumberValue());

        // Call wrapped function
        bool result = IsCacheable(arg0);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
}

NAN_METHOD(NodeWrap::IsImplemented)
{
    if ((info.Length() == 1) && info[0]->IsNumber())
    {
        // Convert from number value
        EAccessMode arg0 = static_cast<EAccessMode>(info[0]->NumberValue());

        // Call wrapped function
        bool result = IsImplemented(arg0);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
    else if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "IBase")))
    {
        // Unwrap object
        BaseWrap* arg0_wrap = ObjectWrap::Unwrap<BaseWrap>(info[0]->ToObject());
        IBase* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped function
        bool result = IsImplemented(arg0);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
    else if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "IBase")))
    {
        // Unwrap object
        BaseWrap* arg0_wrap = ObjectWrap::Unwrap<BaseWrap>(info[0]->ToObject());
        IBase* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped function
        bool result = IsImplemented(*arg0);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
}

NAN_METHOD(NodeWrap::IsReadable)
{
    if ((info.Length() == 1) && info[0]->IsNumber())
    {
        // Convert from number value
        EAccessMode arg0 = static_cast<EAccessMode>(info[0]->NumberValue());

        // Call wrapped function
        bool result = IsReadable(arg0);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
    else if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "IBase")))
    {
        // Unwrap object
        BaseWrap* arg0_wrap = ObjectWrap::Unwrap<BaseWrap>(info[0]->ToObject());
        IBase* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped function
        bool result = IsReadable(arg0);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
    else if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "IBase")))
    {
        // Unwrap object
        BaseWrap* arg0_wrap = ObjectWrap::Unwrap<BaseWrap>(info[0]->ToObject());
        IBase* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped function
        bool result = IsReadable(*arg0);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
}

NAN_METHOD(NodeWrap::IsVisible)
{
    if ((info.Length() == 2) && info[0]->IsNumber() && info[1]->IsNumber())
    {
        // Convert from number value
        EVisibility arg0 = static_cast<EVisibility>(info[0]->NumberValue());

        // Convert from number value
        EVisibility arg1 = static_cast<EVisibility>(info[1]->NumberValue());

        // Call wrapped function
        bool result = IsVisible(arg0, arg1);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
}

NAN_METHOD(NodeWrap::IsWritable)
{
    if ((info.Length() == 1) && info[0]->IsNumber())
    {
        // Convert from number value
        EAccessMode arg0 = static_cast<EAccessMode>(info[0]->NumberValue());

        // Call wrapped function
        bool result = IsWritable(arg0);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
    else if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "IBase")))
    {
        // Unwrap object
        BaseWrap* arg0_wrap = ObjectWrap::Unwrap<BaseWrap>(info[0]->ToObject());
        IBase* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped function
        bool result = IsWritable(arg0);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
    else if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "IBase")))
    {
        // Unwrap object
        BaseWrap* arg0_wrap = ObjectWrap::Unwrap<BaseWrap>(info[0]->ToObject());
        IBase* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped function
        bool result = IsWritable(*arg0);

        // Set return value
        info.GetReturnValue().Set(Nan::New<Boolean>(result));
    }
}
