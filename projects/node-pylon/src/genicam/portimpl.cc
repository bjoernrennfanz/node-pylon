// MIT License
// 
// Copyright (c) 2017 Bj√∂rn Rennfanz <bjoern@fam-rennfanz.de>
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// ----------------------------------------------------------------------------
// This is auto generated code by pylon-node-gen.
// Do not edit this file or all your changes will be lost after re-generation.
// ----------------------------------------------------------------------------

#include "portimpl.h"
#include "../pylon_v8.h"

using namespace v8;
using namespace GenApi_3_0_Basler_pylon_v5_0;

Nan::Persistent<FunctionTemplate> PortImplWrap::prototype;
Nan::Persistent<Function> PortImplWrap::constructor;

// Supported implementations
// CPortImpl()
// CPortImpl(CPortImpl& const arg0)
PortImplWrap::PortImplWrap(Nan::NAN_METHOD_ARGS_TYPE info)
  : m_PortImpl(NULL)
{
    // Check constructor arguments
    if (info.Length() == 0)
    {
        // CPortImpl()
        m_PortImpl = new CPortImpl();
    }
    else if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CPortImpl")))
    {
        // Unwrap object
        PortImplWrap* arg0_wrap = ObjectWrap::Unwrap<PortImplWrap>(info[0]->ToObject());
        CPortImpl* arg0 = arg0_wrap->GetWrapped();

        // CPortImpl(CPortImpl& const arg0)
        m_PortImpl = new CPortImpl(*arg0);
    }
}

PortImplWrap::~PortImplWrap()
{
    delete m_PortImpl;
}

NAN_MODULE_INIT(PortImplWrap::Initialize)
{
    // Prepare constructor template
    Local <FunctionTemplate> tpl = Nan::New<FunctionTemplate>(New);
    tpl->SetClassName(Nan::New("PortImplWrap").ToLocalChecked());
    tpl->InstanceTemplate()->SetInternalFieldCount(1);

    // Register prototypes to template
    Nan::SetPrototypeMethod(tpl, "getAccessMode", GetAccessMode);
    Nan::SetPrototypeMethod(tpl, "read", Read);
    Nan::SetPrototypeMethod(tpl, "write", Write);
    Nan::SetPrototypeMethod(tpl, "setPortImpl", SetPortImpl);
    Nan::SetPrototypeMethod(tpl, "getSwapEndianess", GetSwapEndianess);
    Nan::SetPrototypeMethod(tpl, "replay", Replay);
    Nan::SetPrototypeMethod(tpl, "invalidateNode", InvalidateNode);

    // Register template in Node JS
    prototype.Reset(tpl);
    Local<Function> function = Nan::GetFunction(tpl).ToLocalChecked();
    constructor.Reset(function);
    Nan::Set(target, Nan::New("CPortImpl").ToLocalChecked(), function);
}

NAN_METHOD(PortImplWrap::GetAccessMode)
{
    PortImplWrap* wrappedPortImpl = ObjectWrap::Unwrap<PortImplWrap>(info.This());
    CPortImpl* portImpl = wrappedPortImpl->GetWrapped();

    if (info.Length() == 0)
    {
    }
}

NAN_METHOD(PortImplWrap::GetSwapEndianess)
{
    PortImplWrap* wrappedPortImpl = ObjectWrap::Unwrap<PortImplWrap>(info.This());
    CPortImpl* portImpl = wrappedPortImpl->GetWrapped();

    if (info.Length() == 0)
    {
    }
}

NAN_METHOD(PortImplWrap::InvalidateNode)
{
    PortImplWrap* wrappedPortImpl = ObjectWrap::Unwrap<PortImplWrap>(info.This());
    CPortImpl* portImpl = wrappedPortImpl->GetWrapped();

    if (info.Length() == 0)
    {
    }
}

NAN_METHOD(PortImplWrap::Read)
{
    PortImplWrap* wrappedPortImpl = ObjectWrap::Unwrap<PortImplWrap>(info.This());
    CPortImpl* portImpl = wrappedPortImpl->GetWrapped();

    if ((info.Length() == 3) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "void")) && info[1]->IsNumber() && info[2]->IsNumber())
    {
        // Unwrap object
        voidWrap* arg0_wrap = ObjectWrap::Unwrap<voidWrap>(info[0]->ToObject());
        void* arg0 = arg0_wrap->GetWrapped();

        // Convert from number value
        __int128_t arg1 = static_cast<__int128_t>(info[1]->NumberValue());

        // Convert from number value
        __int128_t arg2 = static_cast<__int128_t>(info[2]->NumberValue());
    }
}

NAN_METHOD(PortImplWrap::Replay)
{
    PortImplWrap* wrappedPortImpl = ObjectWrap::Unwrap<PortImplWrap>(info.This());
    CPortImpl* portImpl = wrappedPortImpl->GetWrapped();

    if ((info.Length() == 2) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "IPortWriteList")) && info[1]->IsBoolean())
    {
        // Unwrap object
        PortWriteListWrap* arg0_wrap = ObjectWrap::Unwrap<PortWriteListWrap>(info[0]->ToObject());
        IPortWriteList* arg0 = arg0_wrap->GetWrapped();
    }
}

NAN_METHOD(PortImplWrap::SetPortImpl)
{
    PortImplWrap* wrappedPortImpl = ObjectWrap::Unwrap<PortImplWrap>(info.This());
    CPortImpl* portImpl = wrappedPortImpl->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "IPort")))
    {
        // Unwrap object
        PortWrap* arg0_wrap = ObjectWrap::Unwrap<PortWrap>(info[0]->ToObject());
        IPort* arg0 = arg0_wrap->GetWrapped();
    }
}

NAN_METHOD(PortImplWrap::Write)
{
    PortImplWrap* wrappedPortImpl = ObjectWrap::Unwrap<PortImplWrap>(info.This());
    CPortImpl* portImpl = wrappedPortImpl->GetWrapped();

    if ((info.Length() == 3) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "void")) && info[1]->IsNumber() && info[2]->IsNumber())
    {
        // Unwrap object
        voidWrap* arg0_wrap = ObjectWrap::Unwrap<voidWrap>(info[0]->ToObject());
        void* arg0 = arg0_wrap->GetWrapped();

        // Convert from number value
        __int128_t arg1 = static_cast<__int128_t>(info[1]->NumberValue());

        // Convert from number value
        __int128_t arg2 = static_cast<__int128_t>(info[2]->NumberValue());
    }
}
