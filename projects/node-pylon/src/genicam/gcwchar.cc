// MIT License
// 
// Copyright (c) 2017 Bj√∂rn Rennfanz <bjoern@fam-rennfanz.de>
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// ----------------------------------------------------------------------------
// This is auto generated code by pylon-node-gen.
// Do not edit this file or all your changes will be lost after re-generation.
// ----------------------------------------------------------------------------

#include "gcwchar.h"
#include "../pylon_v8.h"

using namespace v8;
using namespace GenICam_3_0_Basler_pylon_v5_0;

Nan::Persistent<FunctionTemplate> GCWcharWrap::prototype;
Nan::Persistent<Function> GCWcharWrap::constructor;

// Supported implementations
// gcwchar(unsigned int n)
// gcwchar(gcwchar& const rhs)
GCWcharWrap::GCWcharWrap(Nan::NAN_METHOD_ARGS_TYPE info)
  : m_GCWchar(NULL)
{
    // Check constructor arguments
    if ((info.Length() == 1) && info[0]->IsNumber())
    {
        // Convert from number value
        unsigned int arg0 = static_cast<unsigned int>(info[0]->NumberValue());

        // gcwchar(unsigned int n)
        m_GCWchar = new gcwchar(arg0);
    }
    else if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "gcwchar")))
    {
        // Unwrap object
        GCWcharWrap* arg0_wrap = ObjectWrap::Unwrap<GCWcharWrap>(info[0]->ToObject());
        gcwchar* arg0 = arg0_wrap->GetWrapped();

        // gcwchar(gcwchar& const rhs)
        m_GCWchar = new gcwchar(*arg0);
    }
}

GCWcharWrap::~GCWcharWrap()
{
    delete m_GCWchar;
}

NAN_MODULE_INIT(GCWcharWrap::Initialize)
{
    // Prepare constructor template
    Local <FunctionTemplate> tpl = Nan::New<FunctionTemplate>(New);
    tpl->SetClassName(Nan::New("GCWcharWrap").ToLocalChecked());
    tpl->InstanceTemplate()->SetInternalFieldCount(1);

    // Register prototypes to template
    Nan::SetPrototypeMethod(tpl, "c_str", c_str);
    Nan::SetPrototypeMethod(tpl, "length", length);

    // Register template in Node JS
    prototype.Reset(tpl);
    Local<Function> function = Nan::GetFunction(tpl).ToLocalChecked();
    constructor.Reset(function);
    Nan::Set(target, Nan::New("gcwchar").ToLocalChecked(), function);

    // Register static functions in Node JS
    Nan::Set(target, Nan::New<String>("throwBadAlloc").ToLocalChecked(), Nan::GetFunction(Nan::New<FunctionTemplate>(GCWcharWrap::ThrowBadAlloc)).ToLocalChecked());
    Nan::Set(target, Nan::New<String>("getline").ToLocalChecked(), Nan::GetFunction(Nan::New<FunctionTemplate>(GCWcharWrap::getline)).ToLocalChecked());
}

NAN_METHOD(GCWcharWrap::c_str)
{
    GCWcharWrap* wrappedGCWchar = ObjectWrap::Unwrap<GCWcharWrap>(info.This());
    gcwchar* gCWchar = wrappedGCWchar->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        gCWchar->c_str();
    }
}

NAN_METHOD(GCWcharWrap::length)
{
    GCWcharWrap* wrappedGCWchar = ObjectWrap::Unwrap<GCWcharWrap>(info.This());
    gcwchar* gCWchar = wrappedGCWchar->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        gCWchar->length();
    }
}

NAN_METHOD(GCWcharWrap::getline)
{
    if ((info.Length() == 3) && info[0]->IsObject() && (info[1]->IsObject() && (pylon_v8::ToGCString(info[1]->ToObject()->GetConstructorName()) == "gcstring")) && info[2]->IsString())
    {
        // TODO: Implement wrapper for basic_istream<char, std::char_traits<char> >

        // Unwrap object
        GCStringWrap* arg1_wrap = ObjectWrap::Unwrap<GCStringWrap>(info[1]->ToObject());
        gcstring* arg1 = arg1_wrap->GetWrapped();

        // Convert from string value
        char arg2 = pylon_v8::ToGCString(info[2]->ToString()).c_str()[0];

        // Call wrapped function
        getline(*arg0, *arg1, arg2);
    }
    else if ((info.Length() == 2) && info[0]->IsObject() && (info[1]->IsObject() && (pylon_v8::ToGCString(info[1]->ToObject()->GetConstructorName()) == "gcstring")))
    {
        // TODO: Implement wrapper for basic_istream<char, std::char_traits<char> >

        // Unwrap object
        GCStringWrap* arg1_wrap = ObjectWrap::Unwrap<GCStringWrap>(info[1]->ToObject());
        gcstring* arg1 = arg1_wrap->GetWrapped();

        // Call wrapped function
        getline(*arg0, *arg1);
    }
}

NAN_METHOD(GCWcharWrap::ThrowBadAlloc)
{
    if ((info.Length() == 2) && info[0]->IsString() && info[1]->IsNumber())
    {
        // Convert from string value
        char* arg0 = pylon_v8::ToGCString(info[0]->ToString()).c_str();

        // Convert from number value
        int arg1 = static_cast<int>(info[1]->NumberValue());

        // Call wrapped function
        ThrowBadAlloc(arg0, arg1);
    }
}
