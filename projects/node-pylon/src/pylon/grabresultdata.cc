// MIT License
// 
// Copyright (c) 2017 Bj√∂rn Rennfanz <bjoern@fam-rennfanz.de>
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// ----------------------------------------------------------------------------
// This is auto generated code by pylon-node-gen.
// Do not edit this file or all your changes will be lost after re-generation.
// ----------------------------------------------------------------------------

#include "grabresultdata.h"
#include "../pylon_v8.h"

using namespace v8;
using namespace Pylon;

Nan::Persistent<FunctionTemplate> GrabResultDataWrap::prototype;
Nan::Persistent<Function> GrabResultDataWrap::constructor;

// Supported implementations
// CGrabResultData()
// CGrabResultData(CGrabResultData& const arg0)
GrabResultDataWrap::GrabResultDataWrap(Nan::NAN_METHOD_ARGS_TYPE info)
  : m_GrabResultData(NULL)
{
    // Check constructor arguments
    if (info.Length() == 0)
    {
        // CGrabResultData()
        m_GrabResultData = new CGrabResultData();
    }
    else if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CGrabResultData")))
    {
        // Unwrap object
        GrabResultDataWrap* arg0_wrap = ObjectWrap::Unwrap<GrabResultDataWrap>(info[0]->ToObject());
        CGrabResultData* arg0 = arg0_wrap->GetWrapped();

        // CGrabResultData(CGrabResultData& const arg0)
        m_GrabResultData = new CGrabResultData(*arg0);
    }
}

GrabResultDataWrap::~GrabResultDataWrap()
{
    delete m_GrabResultData;
}

NAN_MODULE_INIT(GrabResultDataWrap::Initialize)
{
    // Prepare constructor template
    Local <FunctionTemplate> tpl = Nan::New<FunctionTemplate>(New);
    tpl->SetClassName(Nan::New("GrabResultDataWrap").ToLocalChecked());
    tpl->InstanceTemplate()->SetInternalFieldCount(1);

    // Register prototypes to template
    Nan::SetPrototypeMethod(tpl, "grabSucceeded", GrabSucceeded);
    Nan::SetPrototypeMethod(tpl, "getErrorDescription", GetErrorDescription);
    Nan::SetPrototypeMethod(tpl, "getErrorCode", GetErrorCode);
    Nan::SetPrototypeMethod(tpl, "getPayloadType", GetPayloadType);
    Nan::SetPrototypeMethod(tpl, "getPixelType", GetPixelType);
    Nan::SetPrototypeMethod(tpl, "getWidth", GetWidth);
    Nan::SetPrototypeMethod(tpl, "getHeight", GetHeight);
    Nan::SetPrototypeMethod(tpl, "getOffsetX", GetOffsetX);
    Nan::SetPrototypeMethod(tpl, "getOffsetY", GetOffsetY);
    Nan::SetPrototypeMethod(tpl, "getPaddingX", GetPaddingX);
    Nan::SetPrototypeMethod(tpl, "getPaddingY", GetPaddingY);
    Nan::SetPrototypeMethod(tpl, "getBuffer", GetBuffer);
    Nan::SetPrototypeMethod(tpl, "getPayloadSize", GetPayloadSize);
    Nan::SetPrototypeMethod(tpl, "getFrameNumber", GetFrameNumber);
    Nan::SetPrototypeMethod(tpl, "getBlockID", GetBlockID);
    Nan::SetPrototypeMethod(tpl, "getTimeStamp", GetTimeStamp);
    Nan::SetPrototypeMethod(tpl, "getStride", GetStride);
    Nan::SetPrototypeMethod(tpl, "getImageSize", GetImageSize);
    Nan::SetPrototypeMethod(tpl, "getCameraContext", GetCameraContext);
    Nan::SetPrototypeMethod(tpl, "getID", GetID);
    Nan::SetPrototypeMethod(tpl, "getImageNumber", GetImageNumber);
    Nan::SetPrototypeMethod(tpl, "getNumberOfSkippedImages", GetNumberOfSkippedImages);
    Nan::SetPrototypeMethod(tpl, "isChunkDataAvailable", IsChunkDataAvailable);
    Nan::SetPrototypeMethod(tpl, "getChunkDataNodeMap", GetChunkDataNodeMap);
    Nan::SetPrototypeMethod(tpl, "hasCRC", HasCRC);
    Nan::SetPrototypeMethod(tpl, "checkCRC", CheckCRC);
    Nan::SetPrototypeMethod(tpl, "getBufferContext", GetBufferContext);
    Nan::SetPrototypeMethod(tpl, "getGrabResultDataImpl", GetGrabResultDataImpl);

    // Register template in Node JS
    prototype.Reset(tpl);
    Local<Function> function = Nan::GetFunction(tpl).ToLocalChecked();
    constructor.Reset(function);
    Nan::Set(target, Nan::New("CGrabResultData").ToLocalChecked(), function);
}

NAN_METHOD(GrabResultDataWrap::CheckCRC)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->CheckCRC();
    }
}

NAN_METHOD(GrabResultDataWrap::GetBlockID)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetBlockID();
    }
}

NAN_METHOD(GrabResultDataWrap::GetBuffer)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetBuffer();
    }
}

NAN_METHOD(GrabResultDataWrap::GetBufferContext)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetBufferContext();
    }
}

NAN_METHOD(GrabResultDataWrap::GetCameraContext)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetCameraContext();
    }
}

NAN_METHOD(GrabResultDataWrap::GetChunkDataNodeMap)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetChunkDataNodeMap();
    }
}

NAN_METHOD(GrabResultDataWrap::GetErrorCode)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetErrorCode();
    }
}

NAN_METHOD(GrabResultDataWrap::GetErrorDescription)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetErrorDescription();
    }
}

NAN_METHOD(GrabResultDataWrap::GetFrameNumber)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetFrameNumber();
    }
}

NAN_METHOD(GrabResultDataWrap::GetGrabResultDataImpl)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetGrabResultDataImpl();
    }
}

NAN_METHOD(GrabResultDataWrap::GetHeight)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetHeight();
    }
}

NAN_METHOD(GrabResultDataWrap::GetID)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetID();
    }
}

NAN_METHOD(GrabResultDataWrap::GetImageNumber)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetImageNumber();
    }
}

NAN_METHOD(GrabResultDataWrap::GetImageSize)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetImageSize();
    }
}

NAN_METHOD(GrabResultDataWrap::GetNumberOfSkippedImages)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetNumberOfSkippedImages();
    }
}

NAN_METHOD(GrabResultDataWrap::GetOffsetX)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetOffsetX();
    }
}

NAN_METHOD(GrabResultDataWrap::GetOffsetY)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetOffsetY();
    }
}

NAN_METHOD(GrabResultDataWrap::GetPaddingX)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetPaddingX();
    }
}

NAN_METHOD(GrabResultDataWrap::GetPaddingY)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetPaddingY();
    }
}

NAN_METHOD(GrabResultDataWrap::GetPayloadSize)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetPayloadSize();
    }
}

NAN_METHOD(GrabResultDataWrap::GetPayloadType)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetPayloadType();
    }
}

NAN_METHOD(GrabResultDataWrap::GetPixelType)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetPixelType();
    }
}

NAN_METHOD(GrabResultDataWrap::GetStride)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if ((info.Length() == 1) && info[0]->IsNumber())
    {
        // Convert from number value
        unsigned int arg0 = static_cast<unsigned int>(info[0]->NumberValue());

        // Call wrapped method
        grabResultData->GetStride(*arg0);
    }
}

NAN_METHOD(GrabResultDataWrap::GetTimeStamp)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetTimeStamp();
    }
}

NAN_METHOD(GrabResultDataWrap::GetWidth)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GetWidth();
    }
}

NAN_METHOD(GrabResultDataWrap::GrabSucceeded)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->GrabSucceeded();
    }
}

NAN_METHOD(GrabResultDataWrap::HasCRC)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->HasCRC();
    }
}

NAN_METHOD(GrabResultDataWrap::IsChunkDataAvailable)
{
    GrabResultDataWrap* wrappedGrabResultData = ObjectWrap::Unwrap<GrabResultDataWrap>(info.This());
    CGrabResultData* grabResultData = wrappedGrabResultData->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        grabResultData->IsChunkDataAvailable();
    }
}
