// MIT License
// 
// Copyright (c) 2017 - 2018 Bj√∂rn Rennfanz <bjoern@fam-rennfanz.de>
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// ----------------------------------------------------------------------------
// This is auto generated code by pylon-node-gen.
// Do not edit this file or all your changes will be lost after re-generation.
// ----------------------------------------------------------------------------

#include "configurationeventhandler.h"
#include "../pylon_v8.h"

using namespace v8;
using namespace Pylon;

Nan::Persistent<FunctionTemplate> ConfigurationEventHandlerWrap::prototype;
Nan::Persistent<Function> ConfigurationEventHandlerWrap::constructor;

// Supported implementations
// CConfigurationEventHandler()
// CConfigurationEventHandler(CConfigurationEventHandler& const arg0)
ConfigurationEventHandlerWrap::ConfigurationEventHandlerWrap(Nan::NAN_METHOD_ARGS_TYPE info)
  : m_ConfigurationEventHandler(NULL)
{
    // Check constructor arguments
    if (info.Length() == 0)
    {
        // CConfigurationEventHandler()
        m_ConfigurationEventHandler = new CConfigurationEventHandler();
    }
    else if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CConfigurationEventHandler")))
    {
        // Unwrap object
        ConfigurationEventHandlerWrap* arg0_wrap = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info[0]->ToObject());
        CConfigurationEventHandler* arg0 = arg0_wrap->GetWrapped();

        // CConfigurationEventHandler(CConfigurationEventHandler& const arg0)
        m_ConfigurationEventHandler = new CConfigurationEventHandler(*arg0);
    }
}

ConfigurationEventHandlerWrap::~ConfigurationEventHandlerWrap()
{
    delete m_ConfigurationEventHandler;
}

NAN_MODULE_INIT(ConfigurationEventHandlerWrap::Initialize)
{
    // Prepare constructor template
    Local <FunctionTemplate> tpl = Nan::New<FunctionTemplate>(New);
    tpl->SetClassName(Nan::New("ConfigurationEventHandlerWrap").ToLocalChecked());
    tpl->InstanceTemplate()->SetInternalFieldCount(1);

    // Register prototypes to template
    Nan::SetPrototypeMethod(tpl, "onAttach", OnAttach);
    Nan::SetPrototypeMethod(tpl, "onAttached", OnAttached);
    Nan::SetPrototypeMethod(tpl, "onDetach", OnDetach);
    Nan::SetPrototypeMethod(tpl, "onDetached", OnDetached);
    Nan::SetPrototypeMethod(tpl, "onDestroy", OnDestroy);
    Nan::SetPrototypeMethod(tpl, "onDestroyed", OnDestroyed);
    Nan::SetPrototypeMethod(tpl, "onOpen", OnOpen);
    Nan::SetPrototypeMethod(tpl, "onOpened", OnOpened);
    Nan::SetPrototypeMethod(tpl, "onClose", OnClose);
    Nan::SetPrototypeMethod(tpl, "onClosed", OnClosed);
    Nan::SetPrototypeMethod(tpl, "onGrabStart", OnGrabStart);
    Nan::SetPrototypeMethod(tpl, "onGrabStarted", OnGrabStarted);
    Nan::SetPrototypeMethod(tpl, "onGrabStop", OnGrabStop);
    Nan::SetPrototypeMethod(tpl, "onGrabStopped", OnGrabStopped);
    Nan::SetPrototypeMethod(tpl, "onGrabError", OnGrabError);
    Nan::SetPrototypeMethod(tpl, "onCameraDeviceRemoved", OnCameraDeviceRemoved);
    Nan::SetPrototypeMethod(tpl, "onConfigurationRegistered", OnConfigurationRegistered);
    Nan::SetPrototypeMethod(tpl, "onConfigurationDeregistered", OnConfigurationDeregistered);
    Nan::SetPrototypeMethod(tpl, "destroyConfiguration", DestroyConfiguration);
    Nan::SetPrototypeMethod(tpl, "debugGetEventHandlerRegistrationCount", DebugGetEventHandlerRegistrationCount);

    // Register template in Node JS
    prototype.Reset(tpl);
    Local<Function> function = Nan::GetFunction(tpl).ToLocalChecked();
    constructor.Reset(function);
    Nan::Set(target, Nan::New("CConfigurationEventHandler").ToLocalChecked(), function);
}

NAN_METHOD(ConfigurationEventHandlerWrap::DebugGetEventHandlerRegistrationCount)
{
    ConfigurationEventHandlerWrap* wrappedConfigurationEventHandler = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info.This());
    CConfigurationEventHandler* configurationEventHandler = wrappedConfigurationEventHandler->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        long result = configurationEventHandler->DebugGetEventHandlerRegistrationCount();

        // Set return value
        info.GetReturnValue().Set(Nan::New<Number>(result));
    }
}

NAN_METHOD(ConfigurationEventHandlerWrap::DestroyConfiguration)
{
    ConfigurationEventHandlerWrap* wrappedConfigurationEventHandler = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info.This());
    CConfigurationEventHandler* configurationEventHandler = wrappedConfigurationEventHandler->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        configurationEventHandler->DestroyConfiguration();

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ConfigurationEventHandlerWrap::OnAttach)
{
    ConfigurationEventHandlerWrap* wrappedConfigurationEventHandler = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info.This());
    CConfigurationEventHandler* configurationEventHandler = wrappedConfigurationEventHandler->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CInstantCamera")))
    {
        // Unwrap object
        InstantCameraWrap* arg0_wrap = ObjectWrap::Unwrap<InstantCameraWrap>(info[0]->ToObject());
        CInstantCamera* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        configurationEventHandler->OnAttach(*arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ConfigurationEventHandlerWrap::OnAttached)
{
    ConfigurationEventHandlerWrap* wrappedConfigurationEventHandler = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info.This());
    CConfigurationEventHandler* configurationEventHandler = wrappedConfigurationEventHandler->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CInstantCamera")))
    {
        // Unwrap object
        InstantCameraWrap* arg0_wrap = ObjectWrap::Unwrap<InstantCameraWrap>(info[0]->ToObject());
        CInstantCamera* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        configurationEventHandler->OnAttached(*arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ConfigurationEventHandlerWrap::OnCameraDeviceRemoved)
{
    ConfigurationEventHandlerWrap* wrappedConfigurationEventHandler = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info.This());
    CConfigurationEventHandler* configurationEventHandler = wrappedConfigurationEventHandler->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CInstantCamera")))
    {
        // Unwrap object
        InstantCameraWrap* arg0_wrap = ObjectWrap::Unwrap<InstantCameraWrap>(info[0]->ToObject());
        CInstantCamera* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        configurationEventHandler->OnCameraDeviceRemoved(*arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ConfigurationEventHandlerWrap::OnClose)
{
    ConfigurationEventHandlerWrap* wrappedConfigurationEventHandler = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info.This());
    CConfigurationEventHandler* configurationEventHandler = wrappedConfigurationEventHandler->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CInstantCamera")))
    {
        // Unwrap object
        InstantCameraWrap* arg0_wrap = ObjectWrap::Unwrap<InstantCameraWrap>(info[0]->ToObject());
        CInstantCamera* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        configurationEventHandler->OnClose(*arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ConfigurationEventHandlerWrap::OnClosed)
{
    ConfigurationEventHandlerWrap* wrappedConfigurationEventHandler = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info.This());
    CConfigurationEventHandler* configurationEventHandler = wrappedConfigurationEventHandler->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CInstantCamera")))
    {
        // Unwrap object
        InstantCameraWrap* arg0_wrap = ObjectWrap::Unwrap<InstantCameraWrap>(info[0]->ToObject());
        CInstantCamera* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        configurationEventHandler->OnClosed(*arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ConfigurationEventHandlerWrap::OnConfigurationDeregistered)
{
    ConfigurationEventHandlerWrap* wrappedConfigurationEventHandler = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info.This());
    CConfigurationEventHandler* configurationEventHandler = wrappedConfigurationEventHandler->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CInstantCamera")))
    {
        // Unwrap object
        InstantCameraWrap* arg0_wrap = ObjectWrap::Unwrap<InstantCameraWrap>(info[0]->ToObject());
        CInstantCamera* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        configurationEventHandler->OnConfigurationDeregistered(*arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ConfigurationEventHandlerWrap::OnConfigurationRegistered)
{
    ConfigurationEventHandlerWrap* wrappedConfigurationEventHandler = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info.This());
    CConfigurationEventHandler* configurationEventHandler = wrappedConfigurationEventHandler->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CInstantCamera")))
    {
        // Unwrap object
        InstantCameraWrap* arg0_wrap = ObjectWrap::Unwrap<InstantCameraWrap>(info[0]->ToObject());
        CInstantCamera* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        configurationEventHandler->OnConfigurationRegistered(*arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ConfigurationEventHandlerWrap::OnDestroy)
{
    ConfigurationEventHandlerWrap* wrappedConfigurationEventHandler = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info.This());
    CConfigurationEventHandler* configurationEventHandler = wrappedConfigurationEventHandler->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CInstantCamera")))
    {
        // Unwrap object
        InstantCameraWrap* arg0_wrap = ObjectWrap::Unwrap<InstantCameraWrap>(info[0]->ToObject());
        CInstantCamera* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        configurationEventHandler->OnDestroy(*arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ConfigurationEventHandlerWrap::OnDestroyed)
{
    ConfigurationEventHandlerWrap* wrappedConfigurationEventHandler = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info.This());
    CConfigurationEventHandler* configurationEventHandler = wrappedConfigurationEventHandler->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CInstantCamera")))
    {
        // Unwrap object
        InstantCameraWrap* arg0_wrap = ObjectWrap::Unwrap<InstantCameraWrap>(info[0]->ToObject());
        CInstantCamera* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        configurationEventHandler->OnDestroyed(*arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ConfigurationEventHandlerWrap::OnDetach)
{
    ConfigurationEventHandlerWrap* wrappedConfigurationEventHandler = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info.This());
    CConfigurationEventHandler* configurationEventHandler = wrappedConfigurationEventHandler->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CInstantCamera")))
    {
        // Unwrap object
        InstantCameraWrap* arg0_wrap = ObjectWrap::Unwrap<InstantCameraWrap>(info[0]->ToObject());
        CInstantCamera* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        configurationEventHandler->OnDetach(*arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ConfigurationEventHandlerWrap::OnDetached)
{
    ConfigurationEventHandlerWrap* wrappedConfigurationEventHandler = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info.This());
    CConfigurationEventHandler* configurationEventHandler = wrappedConfigurationEventHandler->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CInstantCamera")))
    {
        // Unwrap object
        InstantCameraWrap* arg0_wrap = ObjectWrap::Unwrap<InstantCameraWrap>(info[0]->ToObject());
        CInstantCamera* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        configurationEventHandler->OnDetached(*arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ConfigurationEventHandlerWrap::OnGrabError)
{
    ConfigurationEventHandlerWrap* wrappedConfigurationEventHandler = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info.This());
    CConfigurationEventHandler* configurationEventHandler = wrappedConfigurationEventHandler->GetWrapped();

    if ((info.Length() == 2) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CInstantCamera")) && info[1]->IsString())
    {
        // Unwrap object
        InstantCameraWrap* arg0_wrap = ObjectWrap::Unwrap<InstantCameraWrap>(info[0]->ToObject());
        CInstantCamera* arg0 = arg0_wrap->GetWrapped();

        // Convert from string value
        char* arg1 = pylon_v8::ToGCString(info[1]->ToString()).c_str();

        // Call wrapped method
        configurationEventHandler->OnGrabError(*arg0, arg1);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ConfigurationEventHandlerWrap::OnGrabStart)
{
    ConfigurationEventHandlerWrap* wrappedConfigurationEventHandler = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info.This());
    CConfigurationEventHandler* configurationEventHandler = wrappedConfigurationEventHandler->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CInstantCamera")))
    {
        // Unwrap object
        InstantCameraWrap* arg0_wrap = ObjectWrap::Unwrap<InstantCameraWrap>(info[0]->ToObject());
        CInstantCamera* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        configurationEventHandler->OnGrabStart(*arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ConfigurationEventHandlerWrap::OnGrabStarted)
{
    ConfigurationEventHandlerWrap* wrappedConfigurationEventHandler = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info.This());
    CConfigurationEventHandler* configurationEventHandler = wrappedConfigurationEventHandler->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CInstantCamera")))
    {
        // Unwrap object
        InstantCameraWrap* arg0_wrap = ObjectWrap::Unwrap<InstantCameraWrap>(info[0]->ToObject());
        CInstantCamera* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        configurationEventHandler->OnGrabStarted(*arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ConfigurationEventHandlerWrap::OnGrabStop)
{
    ConfigurationEventHandlerWrap* wrappedConfigurationEventHandler = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info.This());
    CConfigurationEventHandler* configurationEventHandler = wrappedConfigurationEventHandler->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CInstantCamera")))
    {
        // Unwrap object
        InstantCameraWrap* arg0_wrap = ObjectWrap::Unwrap<InstantCameraWrap>(info[0]->ToObject());
        CInstantCamera* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        configurationEventHandler->OnGrabStop(*arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ConfigurationEventHandlerWrap::OnGrabStopped)
{
    ConfigurationEventHandlerWrap* wrappedConfigurationEventHandler = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info.This());
    CConfigurationEventHandler* configurationEventHandler = wrappedConfigurationEventHandler->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CInstantCamera")))
    {
        // Unwrap object
        InstantCameraWrap* arg0_wrap = ObjectWrap::Unwrap<InstantCameraWrap>(info[0]->ToObject());
        CInstantCamera* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        configurationEventHandler->OnGrabStopped(*arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ConfigurationEventHandlerWrap::OnOpen)
{
    ConfigurationEventHandlerWrap* wrappedConfigurationEventHandler = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info.This());
    CConfigurationEventHandler* configurationEventHandler = wrappedConfigurationEventHandler->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CInstantCamera")))
    {
        // Unwrap object
        InstantCameraWrap* arg0_wrap = ObjectWrap::Unwrap<InstantCameraWrap>(info[0]->ToObject());
        CInstantCamera* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        configurationEventHandler->OnOpen(*arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}

NAN_METHOD(ConfigurationEventHandlerWrap::OnOpened)
{
    ConfigurationEventHandlerWrap* wrappedConfigurationEventHandler = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info.This());
    CConfigurationEventHandler* configurationEventHandler = wrappedConfigurationEventHandler->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CInstantCamera")))
    {
        // Unwrap object
        InstantCameraWrap* arg0_wrap = ObjectWrap::Unwrap<InstantCameraWrap>(info[0]->ToObject());
        CInstantCamera* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        configurationEventHandler->OnOpened(*arg0);

        // Set return value to undefined
        info.GetReturnValue().SetUndefined();
    }
}
