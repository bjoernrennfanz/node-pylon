// MIT License
// 
// Copyright (c) 2017 - 2018 Bj√∂rn Rennfanz <bjoern@fam-rennfanz.de>
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// ----------------------------------------------------------------------------
// This is auto generated code by pylon-node-gen.
// Do not edit this file or all your changes will be lost after re-generation.
// ----------------------------------------------------------------------------

#include "buffer.h"
#include "../pylon_v8.h"

using namespace v8;
using namespace Pylon;

Nan::Persistent<FunctionTemplate> BufferWrap::prototype;
Nan::Persistent<Function> BufferWrap::constructor;

// Supported implementations
// CBuffer(CBuffer& const arg0)
// CBuffer(void* const pBuffer, __int128_t BufferSize_by)
BufferWrap::BufferWrap(Nan::NAN_METHOD_ARGS_TYPE info)
  : m_Buffer(NULL)
{
    // Check constructor arguments
    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CBuffer")))
    {
        // Unwrap object
        BufferWrap* arg0_wrap = ObjectWrap::Unwrap<BufferWrap>(info[0]->ToObject());
        CBuffer* arg0 = arg0_wrap->GetWrapped();

        // CBuffer(CBuffer& const arg0)
        m_Buffer = new CBuffer(*arg0);
    }
    else if ((info.Length() == 2) && info[0]->IsObject() && info[1]->IsNumber())
    {
        // TODO: Implement wrapper for void

        // Convert from number value
        __int128_t arg1 = static_cast<__int128_t>(info[1]->NumberValue());

        // CBuffer(void* const pBuffer, __int128_t BufferSize_by)
        m_Buffer = new CBuffer(arg0, arg1);
    }
}

BufferWrap::~BufferWrap()
{
    delete m_Buffer;
}

NAN_MODULE_INIT(BufferWrap::Initialize)
{
    // Prepare constructor template
    Local <FunctionTemplate> tpl = Nan::New<FunctionTemplate>(New);
    tpl->SetClassName(Nan::New("BufferWrap").ToLocalChecked());
    tpl->InstanceTemplate()->SetInternalFieldCount(1);

    // Register prototypes to template
    Nan::SetPrototypeMethod(tpl, "getSize", GetSize);

    // Register template in Node JS
    prototype.Reset(tpl);
    Local<Function> function = Nan::GetFunction(tpl).ToLocalChecked();
    constructor.Reset(function);
    Nan::Set(target, Nan::New("CBuffer").ToLocalChecked(), function);
}

NAN_METHOD(BufferWrap::GetSize)
{
    BufferWrap* wrappedBuffer = ObjectWrap::Unwrap<BufferWrap>(info.This());
    CBuffer* buffer = wrappedBuffer->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        __int128_t result = buffer->GetSize();

        // Set return value
        info.GetReturnValue().Set(Nan::New<Number>(result));
    }
}
