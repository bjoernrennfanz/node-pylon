// MIT License
// 
// Copyright (c) 2017 Bj√∂rn Rennfanz <bjoern@fam-rennfanz.de>
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// ----------------------------------------------------------------------------
// This is auto generated code by pylon-node-gen.
// Do not edit this file or all your changes will be lost after re-generation.
// ----------------------------------------------------------------------------

#include "instantcamera.h"
#include "../pylon_v8.h"

using namespace v8;
using namespace Pylon;

Nan::Persistent<FunctionTemplate> InstantCameraWrap::prototype;
Nan::Persistent<Function> InstantCameraWrap::constructor;

// Supported implementations
// CInstantCamera()
// CInstantCamera(CInstantCamera& const arg0)
// CInstantCamera(IPylonDevice* pDevice, ECleanup cleanupProcedure)
InstantCameraWrap::InstantCameraWrap(Nan::NAN_METHOD_ARGS_TYPE info)
  : m_InstantCamera(NULL)
{
    // Check constructor arguments
    if (info.Length() == 0)
    {
        // CInstantCamera()
        m_InstantCamera = new CInstantCamera();
    }
    else if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CInstantCamera")))
    {
        // Unwrap object
        InstantCameraWrap* arg0_wrap = ObjectWrap::Unwrap<InstantCameraWrap>(info[0]->ToObject());
        CInstantCamera* arg0 = arg0_wrap->GetWrapped();

        // CInstantCamera(CInstantCamera& const arg0)
        m_InstantCamera = new CInstantCamera(*arg0);
    }
    else if ((info.Length() == 2) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "IPylonDevice")) && info[1]->IsNumber())
    {
        // Unwrap object
        PylonDeviceWrap* arg0_wrap = ObjectWrap::Unwrap<PylonDeviceWrap>(info[0]->ToObject());
        IPylonDevice* arg0 = arg0_wrap->GetWrapped();

        // Convert from number value
        ECleanup arg1 = static_cast<ECleanup>(info[1]->NumberValue());

        // CInstantCamera(IPylonDevice* pDevice, ECleanup cleanupProcedure)
        m_InstantCamera = new CInstantCamera(arg0, arg1);
    }
}

InstantCameraWrap::~InstantCameraWrap()
{
    delete m_InstantCamera;
}

NAN_MODULE_INIT(InstantCameraWrap::Initialize)
{
    // Prepare constructor template
    Local <FunctionTemplate> tpl = Nan::New<FunctionTemplate>(New);
    tpl->SetClassName(Nan::New("InstantCameraWrap").ToLocalChecked());
    tpl->InstanceTemplate()->SetInternalFieldCount(1);

    // Register prototypes to template
    Nan::SetPrototypeMethod(tpl, "attach", Attach);
    Nan::SetPrototypeMethod(tpl, "isPylonDeviceAttached", IsPylonDeviceAttached);
    Nan::SetPrototypeMethod(tpl, "isCameraDeviceRemoved", IsCameraDeviceRemoved);
    Nan::SetPrototypeMethod(tpl, "hasOwnership", HasOwnership);
    Nan::SetPrototypeMethod(tpl, "destroyDevice", DestroyDevice);
    Nan::SetPrototypeMethod(tpl, "detachDevice", DetachDevice);
    Nan::SetPrototypeMethod(tpl, "open", Open);
    Nan::SetPrototypeMethod(tpl, "isOpen", IsOpen);
    Nan::SetPrototypeMethod(tpl, "close", Close);
    Nan::SetPrototypeMethod(tpl, "startGrabbing", StartGrabbing);
    Nan::SetPrototypeMethod(tpl, "retrieveResult", RetrieveResult);
    Nan::SetPrototypeMethod(tpl, "stopGrabbing", StopGrabbing);
    Nan::SetPrototypeMethod(tpl, "isGrabbing", IsGrabbing);
    Nan::SetPrototypeMethod(tpl, "grabOne", GrabOne);
    Nan::SetPrototypeMethod(tpl, "getQueuedBufferCount", GetQueuedBufferCount);
    Nan::SetPrototypeMethod(tpl, "getGrabResultWaitObject", GetGrabResultWaitObject);
    Nan::SetPrototypeMethod(tpl, "getGrabStopWaitObject", GetGrabStopWaitObject);
    Nan::SetPrototypeMethod(tpl, "getCameraEventWaitObject", GetCameraEventWaitObject);
    Nan::SetPrototypeMethod(tpl, "registerConfiguration", RegisterConfiguration);
    Nan::SetPrototypeMethod(tpl, "deregisterConfiguration", DeregisterConfiguration);
    Nan::SetPrototypeMethod(tpl, "registerImageEventHandler", RegisterImageEventHandler);
    Nan::SetPrototypeMethod(tpl, "deregisterImageEventHandler", DeregisterImageEventHandler);
    Nan::SetPrototypeMethod(tpl, "registerCameraEventHandler", RegisterCameraEventHandler);
    Nan::SetPrototypeMethod(tpl, "deregisterCameraEventHandler", DeregisterCameraEventHandler);
    Nan::SetPrototypeMethod(tpl, "waitForFrameTriggerReady", WaitForFrameTriggerReady);
    Nan::SetPrototypeMethod(tpl, "canWaitForFrameTriggerReady", CanWaitForFrameTriggerReady);
    Nan::SetPrototypeMethod(tpl, "executeSoftwareTrigger", ExecuteSoftwareTrigger);
    Nan::SetPrototypeMethod(tpl, "setCameraContext", SetCameraContext);
    Nan::SetPrototypeMethod(tpl, "getCameraContext", GetCameraContext);
    Nan::SetPrototypeMethod(tpl, "getDeviceInfo", GetDeviceInfo);
    Nan::SetPrototypeMethod(tpl, "getNodeMap", GetNodeMap);
    Nan::SetPrototypeMethod(tpl, "getTLNodeMap", GetTLNodeMap);
    Nan::SetPrototypeMethod(tpl, "getStreamGrabberNodeMap", GetStreamGrabberNodeMap);
    Nan::SetPrototypeMethod(tpl, "getEventGrabberNodeMap", GetEventGrabberNodeMap);
    Nan::SetPrototypeMethod(tpl, "getInstantCameraNodeMap", GetInstantCameraNodeMap);
    Nan::SetPrototypeMethod(tpl, "setBufferFactory", SetBufferFactory);
    Nan::SetPrototypeMethod(tpl, "is1394", Is1394);
    Nan::SetPrototypeMethod(tpl, "isGigE", IsGigE);
    Nan::SetPrototypeMethod(tpl, "isUsb", IsUsb);
    Nan::SetPrototypeMethod(tpl, "isCameraLink", IsCameraLink);
    Nan::SetPrototypeMethod(tpl, "getSfncVersion", GetSfncVersion);
    Nan::SetPrototypeMethod(tpl, "getExtensionInterface", GetExtensionInterface);
    Nan::SetPrototypeMethod(tpl, "isBcon", IsBcon);

    // Register template in Node JS
    prototype.Reset(tpl);
    Local<Function> function = Nan::GetFunction(tpl).ToLocalChecked();
    constructor.Reset(function);
    Nan::Set(target, Nan::New("CInstantCamera").ToLocalChecked(), function);
}

NAN_METHOD(InstantCameraWrap::Attach)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if ((info.Length() == 2) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "IPylonDevice")) && info[1]->IsNumber())
    {
        // Unwrap object
        PylonDeviceWrap* arg0_wrap = ObjectWrap::Unwrap<PylonDeviceWrap>(info[0]->ToObject());
        IPylonDevice* arg0 = arg0_wrap->GetWrapped();

        // Convert from number value
        ECleanup arg1 = static_cast<ECleanup>(info[1]->NumberValue());

        // Call wrapped method
        instantCamera->Attach(arg0, arg1);
    }
}

NAN_METHOD(InstantCameraWrap::CanWaitForFrameTriggerReady)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->CanWaitForFrameTriggerReady();
    }
}

NAN_METHOD(InstantCameraWrap::Close)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->Close();
    }
}

NAN_METHOD(InstantCameraWrap::DeregisterCameraEventHandler)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if ((info.Length() == 2) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CCameraEventHandler")) && (info[1]->IsObject() && (pylon_v8::ToGCString(info[1]->ToObject()->GetConstructorName()) == "gcstring")))
    {
        // Unwrap object
        CameraEventHandlerWrap* arg0_wrap = ObjectWrap::Unwrap<CameraEventHandlerWrap>(info[0]->ToObject());
        CCameraEventHandler* arg0 = arg0_wrap->GetWrapped();

        // Unwrap object
        GCStringWrap* arg1_wrap = ObjectWrap::Unwrap<GCStringWrap>(info[1]->ToObject());
        gcstring* arg1 = arg1_wrap->GetWrapped();

        // Call wrapped method
        instantCamera->DeregisterCameraEventHandler(arg0, *arg1);
    }
}

NAN_METHOD(InstantCameraWrap::DeregisterConfiguration)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CConfigurationEventHandler")))
    {
        // Unwrap object
        ConfigurationEventHandlerWrap* arg0_wrap = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info[0]->ToObject());
        CConfigurationEventHandler* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        instantCamera->DeregisterConfiguration(arg0);
    }
}

NAN_METHOD(InstantCameraWrap::DeregisterImageEventHandler)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if ((info.Length() == 1) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CImageEventHandler")))
    {
        // Unwrap object
        ImageEventHandlerWrap* arg0_wrap = ObjectWrap::Unwrap<ImageEventHandlerWrap>(info[0]->ToObject());
        CImageEventHandler* arg0 = arg0_wrap->GetWrapped();

        // Call wrapped method
        instantCamera->DeregisterImageEventHandler(arg0);
    }
}

NAN_METHOD(InstantCameraWrap::DestroyDevice)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->DestroyDevice();
    }
}

NAN_METHOD(InstantCameraWrap::DetachDevice)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->DetachDevice();
    }
}

NAN_METHOD(InstantCameraWrap::ExecuteSoftwareTrigger)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->ExecuteSoftwareTrigger();
    }
}

NAN_METHOD(InstantCameraWrap::GetCameraContext)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->GetCameraContext();
    }
}

NAN_METHOD(InstantCameraWrap::GetCameraEventWaitObject)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->GetCameraEventWaitObject();
    }
}

NAN_METHOD(InstantCameraWrap::GetDeviceInfo)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->GetDeviceInfo();
    }
}

NAN_METHOD(InstantCameraWrap::GetEventGrabberNodeMap)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->GetEventGrabberNodeMap();
    }
}

NAN_METHOD(InstantCameraWrap::GetExtensionInterface)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->GetExtensionInterface();
    }
}

NAN_METHOD(InstantCameraWrap::GetGrabResultWaitObject)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->GetGrabResultWaitObject();
    }
}

NAN_METHOD(InstantCameraWrap::GetGrabStopWaitObject)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->GetGrabStopWaitObject();
    }
}

NAN_METHOD(InstantCameraWrap::GetInstantCameraNodeMap)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->GetInstantCameraNodeMap();
    }
}

NAN_METHOD(InstantCameraWrap::GetNodeMap)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->GetNodeMap();
    }
}

NAN_METHOD(InstantCameraWrap::GetQueuedBufferCount)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->GetQueuedBufferCount();
    }
}

NAN_METHOD(InstantCameraWrap::GetSfncVersion)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->GetSfncVersion();
    }
}

NAN_METHOD(InstantCameraWrap::GetStreamGrabberNodeMap)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->GetStreamGrabberNodeMap();
    }
}

NAN_METHOD(InstantCameraWrap::GetTLNodeMap)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->GetTLNodeMap();
    }
}

NAN_METHOD(InstantCameraWrap::GrabOne)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if ((info.Length() == 3) && info[0]->IsNumber() && (info[1]->IsObject() && (pylon_v8::ToGCString(info[1]->ToObject()->GetConstructorName()) == "CGrabResultPtr")) && info[2]->IsNumber())
    {
        // Convert from number value
        unsigned int arg0 = static_cast<unsigned int>(info[0]->NumberValue());

        // Unwrap object
        GrabResultPtrWrap* arg1_wrap = ObjectWrap::Unwrap<GrabResultPtrWrap>(info[1]->ToObject());
        CGrabResultPtr* arg1 = arg1_wrap->GetWrapped();

        // Convert from number value
        ETimeoutHandling arg2 = static_cast<ETimeoutHandling>(info[2]->NumberValue());

        // Call wrapped method
        instantCamera->GrabOne(arg0, *arg1, arg2);
    }
}

NAN_METHOD(InstantCameraWrap::HasOwnership)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->HasOwnership();
    }
}

NAN_METHOD(InstantCameraWrap::Is1394)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->Is1394();
    }
}

NAN_METHOD(InstantCameraWrap::IsBcon)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->IsBcon();
    }
}

NAN_METHOD(InstantCameraWrap::IsCameraDeviceRemoved)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->IsCameraDeviceRemoved();
    }
}

NAN_METHOD(InstantCameraWrap::IsCameraLink)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->IsCameraLink();
    }
}

NAN_METHOD(InstantCameraWrap::IsGigE)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->IsGigE();
    }
}

NAN_METHOD(InstantCameraWrap::IsGrabbing)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->IsGrabbing();
    }
}

NAN_METHOD(InstantCameraWrap::IsOpen)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->IsOpen();
    }
}

NAN_METHOD(InstantCameraWrap::IsPylonDeviceAttached)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->IsPylonDeviceAttached();
    }
}

NAN_METHOD(InstantCameraWrap::IsUsb)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->IsUsb();
    }
}

NAN_METHOD(InstantCameraWrap::Open)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->Open();
    }
}

NAN_METHOD(InstantCameraWrap::RegisterCameraEventHandler)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if ((info.Length() == 6) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CCameraEventHandler")) && (info[1]->IsObject() && (pylon_v8::ToGCString(info[1]->ToObject()->GetConstructorName()) == "gcstring")) && info[2]->IsNumber() && info[3]->IsNumber() && info[4]->IsNumber() && info[5]->IsNumber())
    {
        // Unwrap object
        CameraEventHandlerWrap* arg0_wrap = ObjectWrap::Unwrap<CameraEventHandlerWrap>(info[0]->ToObject());
        CCameraEventHandler* arg0 = arg0_wrap->GetWrapped();

        // Unwrap object
        GCStringWrap* arg1_wrap = ObjectWrap::Unwrap<GCStringWrap>(info[1]->ToObject());
        gcstring* arg1 = arg1_wrap->GetWrapped();

        // Convert from number value
        int arg2 = static_cast<int>(info[2]->NumberValue());

        // Convert from number value
        ERegistrationMode arg3 = static_cast<ERegistrationMode>(info[3]->NumberValue());

        // Convert from number value
        ECleanup arg4 = static_cast<ECleanup>(info[4]->NumberValue());

        // Convert from number value
        ECameraEventAvailability arg5 = static_cast<ECameraEventAvailability>(info[5]->NumberValue());

        // Call wrapped method
        instantCamera->RegisterCameraEventHandler(arg0, *arg1, arg2, arg3, arg4, arg5);
    }
}

NAN_METHOD(InstantCameraWrap::RegisterConfiguration)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if ((info.Length() == 3) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CConfigurationEventHandler")) && info[1]->IsNumber() && info[2]->IsNumber())
    {
        // Unwrap object
        ConfigurationEventHandlerWrap* arg0_wrap = ObjectWrap::Unwrap<ConfigurationEventHandlerWrap>(info[0]->ToObject());
        CConfigurationEventHandler* arg0 = arg0_wrap->GetWrapped();

        // Convert from number value
        ERegistrationMode arg1 = static_cast<ERegistrationMode>(info[1]->NumberValue());

        // Convert from number value
        ECleanup arg2 = static_cast<ECleanup>(info[2]->NumberValue());

        // Call wrapped method
        instantCamera->RegisterConfiguration(arg0, arg1, arg2);
    }
}

NAN_METHOD(InstantCameraWrap::RegisterImageEventHandler)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if ((info.Length() == 3) && (info[0]->IsObject() && (pylon_v8::ToGCString(info[0]->ToObject()->GetConstructorName()) == "CImageEventHandler")) && info[1]->IsNumber() && info[2]->IsNumber())
    {
        // Unwrap object
        ImageEventHandlerWrap* arg0_wrap = ObjectWrap::Unwrap<ImageEventHandlerWrap>(info[0]->ToObject());
        CImageEventHandler* arg0 = arg0_wrap->GetWrapped();

        // Convert from number value
        ERegistrationMode arg1 = static_cast<ERegistrationMode>(info[1]->NumberValue());

        // Convert from number value
        ECleanup arg2 = static_cast<ECleanup>(info[2]->NumberValue());

        // Call wrapped method
        instantCamera->RegisterImageEventHandler(arg0, arg1, arg2);
    }
}

NAN_METHOD(InstantCameraWrap::RetrieveResult)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if ((info.Length() == 3) && info[0]->IsNumber() && (info[1]->IsObject() && (pylon_v8::ToGCString(info[1]->ToObject()->GetConstructorName()) == "CGrabResultPtr")) && info[2]->IsNumber())
    {
        // Convert from number value
        unsigned int arg0 = static_cast<unsigned int>(info[0]->NumberValue());

        // Unwrap object
        GrabResultPtrWrap* arg1_wrap = ObjectWrap::Unwrap<GrabResultPtrWrap>(info[1]->ToObject());
        CGrabResultPtr* arg1 = arg1_wrap->GetWrapped();

        // Convert from number value
        ETimeoutHandling arg2 = static_cast<ETimeoutHandling>(info[2]->NumberValue());

        // Call wrapped method
        instantCamera->RetrieveResult(arg0, *arg1, arg2);
    }
}

NAN_METHOD(InstantCameraWrap::SetBufferFactory)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if ((info.Length() == 2) && info[0]->IsObject() && info[1]->IsNumber())
    {
        // TODO: Implement wrapper for IBufferFactory

        // Convert from number value
        ECleanup arg1 = static_cast<ECleanup>(info[1]->NumberValue());

        // Call wrapped method
        instantCamera->SetBufferFactory(arg0, arg1);
    }
}

NAN_METHOD(InstantCameraWrap::SetCameraContext)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if ((info.Length() == 1) && info[0]->IsNumber())
    {
        // Convert from number value
        int arg0 = static_cast<int>(info[0]->NumberValue());

        // Call wrapped method
        instantCamera->SetCameraContext(arg0);
    }
}

NAN_METHOD(InstantCameraWrap::StartGrabbing)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if ((info.Length() == 3) && info[0]->IsNumber() && info[1]->IsNumber() && info[2]->IsNumber())
    {
        // Convert from number value
        unsigned int arg0 = static_cast<unsigned int>(info[0]->NumberValue());

        // Convert from number value
        EGrabStrategy arg1 = static_cast<EGrabStrategy>(info[1]->NumberValue());

        // Convert from number value
        EGrabLoop arg2 = static_cast<EGrabLoop>(info[2]->NumberValue());

        // Call wrapped method
        instantCamera->StartGrabbing(arg0, arg1, arg2);
    }
    else if ((info.Length() == 2) && info[0]->IsNumber() && info[1]->IsNumber())
    {
        // Convert from number value
        EGrabStrategy arg0 = static_cast<EGrabStrategy>(info[0]->NumberValue());

        // Convert from number value
        EGrabLoop arg1 = static_cast<EGrabLoop>(info[1]->NumberValue());

        // Call wrapped method
        instantCamera->StartGrabbing(arg0, arg1);
    }
}

NAN_METHOD(InstantCameraWrap::StopGrabbing)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if (info.Length() == 0)
    {
        // Call wrapped method
        instantCamera->StopGrabbing();
    }
}

NAN_METHOD(InstantCameraWrap::WaitForFrameTriggerReady)
{
    InstantCameraWrap* wrappedInstantCamera = ObjectWrap::Unwrap<InstantCameraWrap>(info.This());
    CInstantCamera* instantCamera = wrappedInstantCamera->GetWrapped();

    if ((info.Length() == 2) && info[0]->IsNumber() && info[1]->IsNumber())
    {
        // Convert from number value
        unsigned int arg0 = static_cast<unsigned int>(info[0]->NumberValue());

        // Convert from number value
        ETimeoutHandling arg1 = static_cast<ETimeoutHandling>(info[1]->NumberValue());

        // Call wrapped method
        instantCamera->WaitForFrameTriggerReady(arg0, arg1);
    }
}
